"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[4521],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=o.createContext({}),c=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,d=u["".concat(i,".").concat(m)]||u[m]||g[m]||a;return r?o.createElement(d,l(l({ref:t},p),{},{components:r})):o.createElement(d,l({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:n,l[1]=s;for(var c=2;c<a;c++)l[c]=r[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},447:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={sidebar_position:9,title:"Logger",keywords:["logger","customisation","node"],description:"How to use & customize logger in fortjs"},l="Logger",s={unversionedId:"concepts/logger",id:"concepts/logger",title:"Logger",description:"How to use & customize logger in fortjs",source:"@site/docs/concepts/logger.md",sourceDirName:"concepts",slug:"/concepts/logger",permalink:"/docs/concepts/logger",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/concepts/logger.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Logger",keywords:["logger","customisation","node"],description:"How to use & customize logger in fortjs"},sidebar:"tutorialSidebar",previous:{title:"View",permalink:"/docs/concepts/view"},next:{title:"Middleware",permalink:"/docs/concepts/middleware"}},i={},c=[{value:"Customize",id:"customize",level:2}],p={toc:c},u="wrapper";function g(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"logger"},"Logger"),(0,n.kt)("p",null,"Logging is a required part of development. We log for debugging, saving exception, information etc."),(0,n.kt)("p",null,"That's why fortjs provides a default logger which is very simple & logs everything in console. The advantage of provided logger is that you don't need to import it everywhere which makes your code clean."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"logger")," is a class member of all components i.e controller, shield, wall, guard. Let's see an example - "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Controller, worker, jsonResult } from \"fortjs\";\n\nexport class UserController extends Controller {\n   \n   @worker()\n   async getAllUsers(){\n       const users = [{\n           id:1,\n           name:'ujjwal'\n       }];\n\n       // log users\n       this.logger.debug('users are', users);\n\n       return jsonResult(users);\n   }\n}\n")),(0,n.kt)("h2",{id:"customize"},"Customize"),(0,n.kt)("p",null,"You might want to log everything in files or database, so want to customize the default logger. Logger can be customized very easily by creating a class & extending ",(0,n.kt)("inlineCode",{parentName:"p"},"Logger")," "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Logger } from 'fortjs';\n\nexport class CustomLogger extends Logger {\n\n    debug(message) {\n        // do anything with message\n    }\n    \n}\n")),(0,n.kt)("p",null,"Now you need to tell framework to use your logger - "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Fort } from 'fortjs';\n\nFort.logger = CustomLogger;\n    \n")),(0,n.kt)("p",null,"Logger has following methods available - "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"debug(...args)"),(0,n.kt)("li",{parentName:"ul"},"info(...args)"),(0,n.kt)("li",{parentName:"ul"},"error(...args)"),(0,n.kt)("li",{parentName:"ul"},"log(...args)")),(0,n.kt)("p",null,"Since you are extending, you can create your own method too."),(0,n.kt)("p",null,"For more help - You can see examples for ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/winston"},"winston")," implementation : ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ujjwalguptaofficial/fortjs/tree/master/example/winston"},"https://github.com/ujjwalguptaofficial/fortjs/tree/master/example/winston")))}g.isMDXComponent=!0}}]);