"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[9791],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,s(s({ref:t},c),{},{components:r})):n.createElement(f,s({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[u]="string"==typeof e?e:o,s[1]=p;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4932:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={title:"Format Response",keywords:["format response","multiple response","mime type","fortjs","node"],description:"Formatting response in nodejs using fortjs"},s="Format response",p={unversionedId:"advanced/format-response",id:"advanced/format-response",title:"Format Response",description:"Formatting response in nodejs using fortjs",source:"@site/docs/advanced/format-response.md",sourceDirName:"advanced",slug:"/advanced/format-response",permalink:"/docs/advanced/format-response",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/advanced/format-response.md",tags:[],version:"current",frontMatter:{title:"Format Response",keywords:["format response","multiple response","mime type","fortjs","node"],description:"Formatting response in nodejs using fortjs"},sidebar:"tutorialSidebar",previous:{title:"Customize Error",permalink:"/docs/advanced/customize-error"},next:{title:"GraphQl",permalink:"/docs/advanced/graphql"}},i={},l=[],c={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"format-response"},"Format response"),(0,o.kt)("p",null,"You can customize the format of your response and based on ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation"},"content negotiation")," fortjs select the appropriate response. If an appropriate response is not found then a response with status code - 406 is returned."),(0,o.kt)("p",null,"Let's see an example -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, MIME_TYPE} from "fortjs";\n\nexport class RandomController extends Controller {\n    \n    @http.get("/format")\n    async format() {\n        const result = {\n            [MIME_TYPE.Json]: () => {\n                return { message: "hello world" }\n            },\n            [MIME_TYPE.Html]: () => {\n                return "<p>hello world</p>"\n            },\n            [MIME_TYPE.Text]: () => {\n                return "hello world"\n            }\n        };\n        return multiFormatResult(result);\n    }\n}\n')),(0,o.kt)("p",null,"In the above code - we are returning three format (html, json, text)."))}m.isMDXComponent=!0}}]);