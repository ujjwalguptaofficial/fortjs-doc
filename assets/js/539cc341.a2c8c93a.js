"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[4042],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},i=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,s(s({ref:t},i),{},{components:r})):n.createElement(f,s({ref:t},i))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4993:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"Data",keywords:["data","components","options","fortjs","node"],description:"How to pass & access components data"},s="Data",l={unversionedId:"concepts/data",id:"concepts/data",title:"Data",description:"How to pass & access components data",source:"@site/docs/concepts/data.md",sourceDirName:"concepts",slug:"/concepts/data",permalink:"/docs/concepts/data",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/concepts/data.md",tags:[],version:"current",frontMatter:{title:"Data",keywords:["data","components","options","fortjs","node"],description:"How to pass & access components data"},sidebar:"tutorialSidebar",previous:{title:"Cookie",permalink:"/docs/concepts/cookie"},next:{title:"File",permalink:"/docs/concepts/file"}},c={},p=[{value:"Pass data from Wall",id:"pass-data-from-wall",level:2},{value:"Access data passed from Wall in Controller",id:"access-data-passed-from-wall-in-controller",level:2}],i={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"data"},"Data"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"data")," is class member of Wall, Guard , Shield and Controller. It is used to transfer data from one component to another till worker."),(0,a.kt)("p",null,"e.g - Let's see how we can pass data from ",(0,a.kt)("strong",{parentName:"p"},"Wall")," to ",(0,a.kt)("strong",{parentName:"p"},"Controller")," - "),(0,a.kt)("h2",{id:"pass-data-from-wall"},"Pass data from Wall"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Wall, textResult } from \"fortjs\";\nexport class RequestLogger extends Wall {\n\n    private getIP(req) {\n        var ip = (req.headers['x-forwarded-for'] || '').split(',').pop() ||\n            req.connection.remoteAddress ||\n            req.socket.remoteAddress ||\n            req.connection.socket.remoteAddress\n        return ip;\n    }\n\n    async onIncoming() {\n        // here we are sending ip to other components\n        this.data.ip = this.getIP(this.request);\n\n        return null;\n    }\n}\n")),(0,a.kt)("p",null,"The above wall is using ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," to pass ip to other components."),(0,a.kt)("h2",{id:"access-data-passed-from-wall-in-controller"},"Access data passed from Wall in Controller"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Controller, textResult, defaultWorker } from "fortjs";\n\nexport class DefaultController extends Controller {\n\n    @defaultWorker()\n    async default() {\n        // access ip \n        const ip = this.data.ip;\n        return textResult(`Ip is ${ip}`);\n    }\n}\n')))}u.isMDXComponent=!0}}]);