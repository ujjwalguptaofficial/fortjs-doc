"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[6058],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>v});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(a),m=n,v=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return a?r.createElement(v,i(i({ref:t},p),{},{components:a})):r.createElement(v,i({ref:t},p))}));function v(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6793:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:4,title:"Validation",keywords:["validation","HTTP Body validation","QueryString validation","URL Parameter validation","Data validation"],description:"Explore Fortjs validation capabilities for HTTP Body, Query String, and URL Parameters. Learn how to use the versatile validate decorator, backed by powerful components like Guard and Shield."},i="Validation",l={unversionedId:"validation",id:"validation",title:"Validation",description:"Explore Fortjs validation capabilities for HTTP Body, Query String, and URL Parameters. Learn how to use the versatile validate decorator, backed by powerful components like Guard and Shield.",source:"@site/docs/validation.md",sourceDirName:".",slug:"/validation",permalink:"/fortjs-doc/docs/validation",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/validation.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Validation",keywords:["validation","HTTP Body validation","QueryString validation","URL Parameter validation","Data validation"],description:"Explore Fortjs validation capabilities for HTTP Body, Query String, and URL Parameters. Learn how to use the versatile validate decorator, backed by powerful components like Guard and Shield."},sidebar:"tutorialSidebar",previous:{title:"Route",permalink:"/fortjs-doc/docs/route"},next:{title:"Authentication",permalink:"/fortjs-doc/docs/authentication"}},s={},d=[{value:"Validate HTTP Body",id:"validate-http-body",level:2},{value:"Validate Query string",id:"validate-query-string",level:2},{value:"Validate Url Param",id:"validate-url-param",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"validation"},"Validation"),(0,n.kt)("p",null,"Validation in Fort.js is facilitated through the ",(0,n.kt)("a",{parentName:"p",href:"/fortjs-doc/docs/decorators/validate"},"validate decorator"),", enabling you to validate incoming data from HTTP requests. This powerful feature allows validation for:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"HTTP Body"),(0,n.kt)("li",{parentName:"ul"},"Query String"),(0,n.kt)("li",{parentName:"ul"},"URL Parameters")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"validate")," decorator takes a DTO (Data Transfer Object) class as a parameter for validation. The default validator leverages the widely used validation library, ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/class-validator"},"class-validator"),"."),(0,n.kt)("p",null,"Let's see How we can validate different types of data from request - "),(0,n.kt)("h2",{id:"validate-http-body"},"Validate HTTP Body"),(0,n.kt)("p",null,"HTTP Body validation is achieved using the ",(0,n.kt)("inlineCode",{parentName:"p"},"@validate.body")," decorator. Simply pass the DTO class as a parameter to enforce validation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import { Controller, jsonResult, HTTP_STATUS_CODE, http, validate } from 'fortjs';\nimport { User } from '@/models/user';\n\nexport class UserController extends Controller {\n\n    @http.post(\"/\")\n    //highlight-next-line\n    @validate.body(User)\n    async addUser() {\n        const newUser = this.body;\n        return jsonResult(newUser, HTTP_STATUS_CODE.Created);\n    }\n}\n")),(0,n.kt)("p",null,"Here is an example of how our DTO class looks like - "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'import { Length, Contains, IsIn, IsEmail, IsNumber } from "class-validator";\n\nexport class User {\n    @IsNumber()\n    id?: number;\n\n    @Length(5)\n    name: string;\n\n    @IsEmail()\n    emailId: string;\n\n    constructor(user: any) {\n        this.id = Number(user.id);\n        this.name = user.name;\n        this.emailId = user.emailId;\n    }\n}\n')),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"The validator passes the request data into the constructor of the DTO class, providing an opportunity to customize it based on specific requirements. For instance:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"Changing data types"),(0,n.kt)("li",{parentName:"ul"},"Removing extra data"))),(0,n.kt)("h2",{id:"validate-query-string"},"Validate Query string"),(0,n.kt)("p",null,"Url Query string validation is achieved using the ",(0,n.kt)("inlineCode",{parentName:"p"},"@validate.query")," decorator. Simply pass the DTO class as a parameter to enforce validation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, textResult, HTTP_STATUS_CODE, http, validate } from \'fortjs\';\nimport { User } from \'@/models/user\';\nimport { IsNumber } from "class-validator";\n\nclass RemoveQueryStringDTO{\n\n    @IsNumber()\n    id:number;\n\n    constructor(data){\n        // the id from query string will be always string, so it needs to be converted into number\n        //highlight-next-line\n        this.id = Number(data.id);\n    }\n}\n\nexport class UserController extends Controller {\n\n    @http.delete("/")\n    //highlight-next-line\n    @validate.query(RemoveQueryStringDTO)\n    async removeByQueryString() {\n        // taking id from query string\n        const userId = this.query.id;\n        return textResult("invalid user", 404);\n    }\n}\n')),(0,n.kt)("h2",{id:"validate-url-param"},"Validate Url Param"),(0,n.kt)("p",null,"Url Param validation is achieved using the ",(0,n.kt)("inlineCode",{parentName:"p"},"@validate.param")," decorator. Simply pass the DTO class as a parameter to enforce validation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import { Controller, textResult, HTTP_STATUS_CODE, http, validate } from 'fortjs';\nimport { User } from '@/models/user';\n\nexport class UserController extends Controller {\n\n    @http.delete(\"/{id}\")\n    //highlight-next-line\n    @validate.param(RemoveQueryStringDTO)\n    async removeUser() {\n        // taking id from param\n        const userId = this.param.id;\n        return textResult(\"invalid user\", 404);\n    }\n}\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"The validate decorator internally utilizes powerful components called ",(0,n.kt)("a",{parentName:"p",href:"/fortjs-doc/docs/component/guard"},"Guard")," and ",(0,n.kt)("a",{parentName:"p",href:"/fortjs-doc/docs/component/shield"},"Shield"),". These components are versatile and offer a high level of reusability, making them excellent choices for validation purposes."),(0,n.kt)("p",{parentName:"admonition"},"If you need to add any custom validation, you can leverage these components.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note:-")," The default validator uses ",(0,n.kt)("inlineCode",{parentName:"p"},"class-validator")," for validation but you can customize it also. Please read ",(0,n.kt)("a",{parentName:"p",href:"/fortjs-doc/docs/advanced/validator"},"validator")," doc."))}c.isMDXComponent=!0}}]);