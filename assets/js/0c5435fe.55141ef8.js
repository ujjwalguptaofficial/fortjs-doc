"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[729],{3905:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>f});var n=s(7294);function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function r(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function a(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?r(Object(s),!0).forEach((function(t){o(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,n,o=function(e,t){if(null==e)return{};var s,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||(o[s]=e[s]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)s=r[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(o[s]=e[s])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),s=t;return e&&(s="function"==typeof e?e(t):a(a({},t),e)),s},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var s=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(s),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||r;return s?n.createElement(f,a(a({ref:t},u),{},{components:s})):n.createElement(f,a({ref:t},u))}));function f(e,t){var s=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=s.length,a=new Array(r);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<r;l++)a[l]=s[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,s)}m.displayName="MDXCreateElement"},2367:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var n=s(7462),o=(s(7294),s(3905));const r={title:"Session",keywords:["FortJs","Node.js","web framework","session","session store","documentation"],description:"Learn about sessions in FortJs, a web framework for Node.js. Understand how to manage session data and customize the session store."},a="Session",i={unversionedId:"concepts/session",id:"concepts/session",title:"Session",description:"Learn about sessions in FortJs, a web framework for Node.js. Understand how to manage session data and customize the session store.",source:"@site/docs/concepts/session.md",sourceDirName:"concepts",slug:"/concepts/session",permalink:"/docs/concepts/session",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/concepts/session.md",tags:[],version:"current",frontMatter:{title:"Session",keywords:["FortJs","Node.js","web framework","session","session store","documentation"],description:"Learn about sessions in FortJs, a web framework for Node.js. Understand how to manage session data and customize the session store."},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/docs/concepts/query"},next:{title:"Bootstrap",permalink:"/docs/setup"}},c={},l=[{value:"Using session",id:"using-session",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...s}=e;return(0,o.kt)(p,(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"session"},"Session"),(0,o.kt)("p",null,"Session is a state management technique that empowers you to store and retrieve values for a user as they navigate through pages in a web application."),(0,o.kt)("h2",{id:"using-session"},"Using session"),(0,o.kt)("p",null,"FortJs provides a session property that is available in all components."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { Controller, http, textResult } from \"fortjs\";\n\nexport class DefaultController extends Controller {\n\n    @http.get(\"/\")\n    async default() {\n        // Check if session exists\n        const isSessionExist = await this.session.isExist('userId');\n\n        // Add value to session\n        await this.session.set('userId', 45);\n\n        // Get session value\n        const userIdFromSession = await this.session.get('userId');\n\n        // Remove session\n        await this.session.remove('session_name');\n\n        // Set multiple sessions at a time\n        await this.session.setMany({\n            'user_id': 1,\n            'name': 'ujjwal gupta'\n        });\n\n        return textResult('Welcome to FortJs');\n    }\n}\n")),(0,o.kt)("p",null,"By default, FortJs stores all your session data in memory, which means data will be lost when the Node.js process is stopped or restarted."),(0,o.kt)("p",null,"If you want to preserve your session values, you need to store your values in a database or use any tools or services. You can customize the session store by creating a ",(0,o.kt)("a",{parentName:"p",href:"/docs/advanced/session-store"},"session store"),'."'))}d.isMDXComponent=!0}}]);