"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[6847],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=s(n),u=r,m=h["".concat(i,".").concat(u)]||h[u]||d[u]||o;return n?a.createElement(m,c(c({ref:t},p),{},{components:n})):a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[h]="string"==typeof e?e:r,c[1]=l;for(var s=2;s<o;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5216:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"Caching",keywords:["Fort.js","caching","cacheFor decorator","performance optimization","web development","JavaScript framework"],description:"Explore how to implement caching in your Fort.js applications for improved performance. Learn about the cacheFor decorator and best practices for caching strategies."},c="Caching",l={unversionedId:"concepts/caching",id:"concepts/caching",title:"Caching",description:"Explore how to implement caching in your Fort.js applications for improved performance. Learn about the cacheFor decorator and best practices for caching strategies.",source:"@site/docs/concepts/caching.md",sourceDirName:"concepts",slug:"/concepts/caching",permalink:"/docs/concepts/caching",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/concepts/caching.md",tags:[],version:"current",frontMatter:{title:"Caching",keywords:["Fort.js","caching","cacheFor decorator","performance optimization","web development","JavaScript framework"],description:"Explore how to implement caching in your Fort.js applications for improved performance. Learn about the cacheFor decorator and best practices for caching strategies."},sidebar:"tutorialSidebar",previous:{title:"Middleware",permalink:"/docs/concepts/middleware"},next:{title:"Cron",permalink:"/docs/concepts/cron"}},i={},s=[{value:"cacheFor",id:"cachefor",level:2},{value:"Cache Options",id:"cache-options",level:3},{value:"1. query",id:"1-query",level:4},{value:"2. param",id:"2-param",level:4},{value:"Cache Manager",id:"cache-manager",level:2},{value:"Save data",id:"save-data",level:3},{value:"Get data",id:"get-data",level:3},{value:"Delete data",id:"delete-data",level:3}],p={toc:s},h="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"caching"},"Caching"),(0,r.kt)("p",null,"Caching is a technique designed to store frequently used data in your application, enabling faster access."),(0,r.kt)("p",null,"Fort.js supports caching, allowing you to cache ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," endpoints. When you apply caching to an endpoint, Fort.js will store it in the cache for a specified time, resulting in a faster response for your API."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"By default cache data is stored in memory and Cache store can be configured to store data in any storage like in database or memory database like REDIS etc. For more information please read ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/cache-store"},"Cache store documentation")," ")),(0,r.kt)("h2",{id:"cachefor"},"cacheFor"),(0,r.kt)("p",null,"Fort.js provides the cacheFor decorator, which can be used to apply caching to an endpoint. The cacheFor decorator accepts the TTL (time to live) as its first parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, viewResult, textResult, assign, http, cacheFor } from "fortjs";\n\nexport class DefaultController extends Controller {\n\n    @http.get("/hello-world")\n    //highlight-start\n    @cacheFor(5) // Cache response for 5 seconds\n    //highlight-end\n    async helloWorld(){\n        return textResult("Hello World");\n    }\n}\n')),(0,r.kt)("h3",{id:"cache-options"},"Cache Options"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheFor")," decorator accepts an object as its second parameter, which provides the following options:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"query")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"param"))),(0,r.kt)("h4",{id:"1-query"},"1. query"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," option allows Fort.js to cache the API response when the URL matches the specified query."),(0,r.kt)("p",null,"For example, to cache the response only when the URL includes ",(0,r.kt)("inlineCode",{parentName:"p"},"cache=true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, viewResult, textResult, assign, http, cacheFor } from "fortjs";\n\nexport class DefaultController extends Controller {\n\n    \n    @http.get("/hello-world")\n    //highlight-start\n    @cacheFor(5,{\n        query:{\n            cache:"true"\n        }\n    }) // Cache response for 5 seconds when query string has cache=true\n    //highlight-end\n    async helloWorld(){\n        return textResult("Hello World");\n    }\n}\n')),(0,r.kt)("h4",{id:"2-param"},"2. param"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"param")," option allows Fort.js to cache the API response when the URL matches the specified param."),(0,r.kt)("p",null,"For example, to cache the response only when the URL has param value of user id = 1 :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, viewResult, textResult, assign, http, cacheFor } from "fortjs";\n\nexport class DefaultController extends Controller {\n\n    @http.get("/{id}")\n    //highlight-start\n    @cacheFor(5,{\n        param:{\n            id:"1"\n        }\n    }) // Cache response for 5 seconds when id =1 in param\n    //highlight-end\n    async getById(){\n        return textResult("Hello World");\n    }\n}\n')),(0,r.kt)("h2",{id:"cache-manager"},"Cache Manager"),(0,r.kt)("p",null,"The Cache Manager allows you to manually cache data using key-value pairs. In Fort.js, you can access the ",(0,r.kt)("inlineCode",{parentName:"p"},"cache")," property in all components to utilize the Cache Manager."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"cacheFor")," internally uses Cache Manager.")),(0,r.kt)("h3",{id:"save-data"},"Save data"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," method available on ",(0,r.kt)("inlineCode",{parentName:"p"},"cache")," can be used to save data. The ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," method accepts - key, value and ttl in seconds. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, cacheFor, textResult } from "fortjs";\n\nexport class CacheController extends Controller {\n\n    @http.post("/add")\n    async cacheDataManually() {\n        const { key, value } = this.body;\n        //highlight-start\n        // cache this data for 60 second\n        await this.cache.set(key, value, 60);\n        //highlight-end\n        return textResult("Ok");\n    }\n}\n')),(0,r.kt)("h3",{id:"get-data"},"Get data"),(0,r.kt)("p",null,"Once you have save data, you can get data using ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," property to fetch the data stored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, cacheFor, jsonResult } from "fortjs";\n\nexport class CacheController extends Controller {\n\n    @http.get("/get/{key}")\n    async getCacheData() {\n        const { key } = this.param;\n        //highlight-start\n        const value = await this.cache.get(key);\n        //highlight-end\n        return jsonResult({\n            value: value && value.data\n        });\n    }\n\n}\n')),(0,r.kt)("h3",{id:"delete-data"},"Delete data"),(0,r.kt)("p",null,"The stored data can be deleted using ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," method. The ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," method returns boolean value indicating if data is deleted or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, cacheFor, jsonResult } from "fortjs";\n\nexport class CacheController extends Controller {\n\n    @http.get("/delete/{key}")\n    async deleteCache() {\n        const { key } = this.param;\n        //highlight-start\n        const value = await this.cache.delete(key);\n        //highlight-end\n        return jsonResult({\n            value: value\n        });\n    }\n}\n')))}d.isMDXComponent=!0}}]);