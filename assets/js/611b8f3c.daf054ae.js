"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[3725],{3905:(e,s,n)=>{n.d(s,{Zo:()=>u,kt:()=>y});var t=n(7294);function o(e,s,n){return s in e?Object.defineProperty(e,s,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[s]=n,e}function r(e,s){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);s&&(t=t.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var s=1;s<arguments.length;s++){var n=null!=arguments[s]?arguments[s]:{};s%2?r(Object(n),!0).forEach((function(s){o(e,s,n[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(n,s))}))}return e}function i(e,s){if(null==e)return{};var n,t,o=function(e,s){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],s.indexOf(n)>=0||(o[n]=e[n]);return o}(e,s);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],s.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),c=function(e){var s=t.useContext(l),n=s;return e&&(n="function"==typeof e?e(s):a(a({},s),e)),n},u=function(e){var s=c(e.components);return t.createElement(l.Provider,{value:s},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var s=e.children;return t.createElement(t.Fragment,{},s)}},d=t.forwardRef((function(e,s){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,y=p["".concat(l,".").concat(d)]||p[d]||m[d]||r;return n?t.createElement(y,a(a({ref:s},u),{},{components:n})):t.createElement(y,a({ref:s},u))}));function y(e,s){var n=arguments,o=s&&s.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=d;var i={};for(var l in s)hasOwnProperty.call(s,l)&&(i[l]=s[l]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<r;c++)a[c]=n[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7140:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=n(7462),o=(n(7294),n(3905));const r={title:"Session store",keywords:["FortJs","Session Store","Custom Session Store","FortJs Examples","Web Development","Node.js"],description:"Explore the implementation of a custom session store in FortJs. Learn how to manage user sessions efficiently for your FortJs applications."},a="Session Store",i={unversionedId:"advanced/session-store",id:"advanced/session-store",title:"Session store",description:"Explore the implementation of a custom session store in FortJs. Learn how to manage user sessions efficiently for your FortJs applications.",source:"@site/docs/advanced/session-store.md",sourceDirName:"advanced",slug:"/advanced/session-store",permalink:"/docs/advanced/session-store",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/advanced/session-store.md",tags:[],version:"current",frontMatter:{title:"Session store",keywords:["FortJs","Session Store","Custom Session Store","FortJs Examples","Web Development","Node.js"],description:"Explore the implementation of a custom session store in FortJs. Learn how to manage user sessions efficiently for your FortJs applications."},sidebar:"tutorialSidebar",previous:{title:"GraphQl",permalink:"/docs/advanced/graphql"},next:{title:"Socket.io Configuration",permalink:"/docs/advanced/socket-io"}},l={},c=[{value:"Implement a session store",id:"implement-a-session-store",level:2},{value:"Use Session Store",id:"use-session-store",level:2}],u={toc:c},p="wrapper";function m(e){let{components:s,...n}=e;return(0,o.kt)(p,(0,t.Z)({},u,n,{components:s,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"session-store"},"Session Store"),(0,o.kt)("p",null,"FortJs allows you to configure your session store and store session data in a database, or use any service. A session store is a class that implements the interface - ",(0,o.kt)("inlineCode",{parentName:"p"},"ISessionStore"),"."),(0,o.kt)("h2",{id:"implement-a-session-store"},"Implement a session store"),(0,o.kt)("p",null,"Let's explore how to implement a simple memory session store "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { ISessionStore } from "fortjs";\n\n// A simple in-memory storage for session data\nconst sessionValues: Map<string, { [key: string]: any }> = new Map();\n\nexport class MemorySessionStore implements ISessionStore {\n    sessionId: string;\n\n    constructor(sessionId: string) {\n        this.sessionId = sessionId;\n    }\n\n    // Private method to get the session data associated with the current session ID\n    private getSessionValue_() {\n        return sessionValues.get(this.sessionId);\n    }\n\n    // Check if any session data exists\n    async isAnyExist() {\n        return this.getSessionValue_() != null;\n    }\n\n    // Get the value associated with a specific key in the session\n    async get(key: string): Promise<any> {\n        const savedValue = this.getSessionValue_();\n        return savedValue != null ? savedValue[key] : null;\n    }\n\n    // Get all session data\n    async getAll(): Promise<{ [key: string]: any }> {\n        const savedValue = this.getSessionValue_();\n        return savedValue || {};\n    }\n\n    // Check if a specific key exists in the session\n    async isExist(key: string): Promise<boolean> {\n        const savedValue = this.getSessionValue_();\n        return savedValue == null ? false : savedValue[key] != null;\n    }\n\n    // Clear all session data for the current session ID\n    async clear(): Promise<void> {\n        // Remove session values\n        sessionValues.delete(this.sessionId);\n    }\n\n    // Set a value for a specific key in the session\n    async set(key: string, val: any) {\n        const savedValue = this.getSessionValue_();\n        if (savedValue == null) {\n            // If no session data exists, create a new entry\n            sessionValues.set(this.sessionId, {\n                [key]: val\n            });\n        } else {\n            // Update the value for an existing key\n            savedValue[key] = val;\n        }\n    }\n\n    // Set multiple values in the session at once\n    async setMany(values: { [key: string]: any }) {\n        return Promise.all(\n            Object.keys(values).map((key) => {\n                return this.set(key, values[key]);\n            })\n        );\n    }\n\n    // Remove a specific key from the session\n    async remove(key: string) {\n        const savedValue = this.getSessionValue_();\n        if (savedValue != null) {\n            // Set the value to null to effectively remove it\n            savedValue[key] = null;\n        }\n    }\n}\n')),(0,o.kt)("h2",{id:"use-session-store"},"Use Session Store"),(0,o.kt)("p",null,"Once you have created a session store, you need to instruct FortJs to use the new session store."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Fort } from "fortjs";\nimport { UserController } from "./controllers";\nimport { MemorySessionStore } from "./memory_session_store";\n\n//highlight-start\n// set your session provider\nFort.sessionStore = MemorySessionStore\n//highlight-end\n\n//add routes\nFort.routes = [{\n    controller: UserController,\n    path: "/user"\n}];\n\nFort.create();\n')),(0,o.kt)("p",null,"For a complete example, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ujjwalguptaofficial/fortjs-examples/tree/master/session-store"},"Session Store Example")))}m.isMDXComponent=!0}}]);