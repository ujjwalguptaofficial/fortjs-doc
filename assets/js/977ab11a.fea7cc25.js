"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[5948],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(r),m=o,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return r?n.createElement(k,l(l({ref:t},u),{},{components:r})):n.createElement(k,l({ref:t},u))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},397:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:1,title:"Worker",keywords:["worker","route","controller method","fortjs","node"],description:"Description about worker in fortjs"},l="Worker",i={unversionedId:"advanced/worker",id:"advanced/worker",title:"Worker",description:"Description about worker in fortjs",source:"@site/docs/advanced/worker.md",sourceDirName:"advanced",slug:"/advanced/worker",permalink:"/docs/advanced/worker",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/advanced/worker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Worker",keywords:["worker","route","controller method","fortjs","node"],description:"Description about worker in fortjs"},sidebar:"tutorialSidebar",previous:{title:"View Engine Data",permalink:"/docs/interfaces/view-engine-data"},next:{title:"Components",permalink:"/docs/advanced/components"}},s={},p=[{value:"Creating worker",id:"creating-worker",level:2},{value:"Example",id:"example",level:3},{value:"default worker implementation",id:"default-worker-implementation",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"worker"},"Worker"),(0,o.kt)("p",null,"Worker is a class method which acts as end point. It does particular task and return the final result. "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For simpler understanding - Consider worker is a person who does a particular task and return the result.")),(0,o.kt)("p",null,"A worker method -"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"must be async or return a promise (since async is built on top of promises)."),(0,o.kt)("li",{parentName:"ul"},"The result returned by worker method must be promise of type ",(0,o.kt)("a",{parentName:"li",href:"/docs/interfaces/http-result"},"HttpResult"),".")),(0,o.kt)("p",null,"Since a worker is part of controller, it have the access to all the things which a controller has i.e - "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Request - ",(0,o.kt)("inlineCode",{parentName:"li"},"this.request")),(0,o.kt)("li",{parentName:"ul"},"Response - ",(0,o.kt)("inlineCode",{parentName:"li"},"this.response")),(0,o.kt)("li",{parentName:"ul"},"Cookie - ",(0,o.kt)("inlineCode",{parentName:"li"},"this.cookies")),(0,o.kt)("li",{parentName:"ul"},"Session - ",(0,o.kt)("inlineCode",{parentName:"li"},"this.session")),(0,o.kt)("li",{parentName:"ul"},"Query string data - ",(0,o.kt)("inlineCode",{parentName:"li"},"this.query")),(0,o.kt)("li",{parentName:"ul"},"Post data - ",(0,o.kt)("inlineCode",{parentName:"li"},"this.post")),(0,o.kt)("li",{parentName:"ul"},"Route parameter -  ",(0,o.kt)("inlineCode",{parentName:"li"},"this.param")),(0,o.kt)("li",{parentName:"ul"},"Data from other components -  ",(0,o.kt)("inlineCode",{parentName:"li"},"this.data"))),(0,o.kt)("h2",{id:"creating-worker"},"Creating worker"),(0,o.kt)("p",null,"Worker is created by using decorator - ",(0,o.kt)("inlineCode",{parentName:"p"},"worker")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultWorker"),"."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Controller, worker, defaultWorker, textResult } from "fortjs";\n\nexport class UserController extends Controller {\n   \n    @defaultWorker()\n    async default () {\n       return textResult("This is default worker for section user");\n    }\n\n    @worker()\n    async getUser() {\n        return textResult("This is a worker for section user");\n    }\n\n}\n')),(0,o.kt)("p",null,"Lets consider that controller - 'UserController' is associated with path '/user' and our domain is abc.com."),(0,o.kt)("p",null,"So what these decorators - ",(0,o.kt)("inlineCode",{parentName:"p"},"worker")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultWorker")," do ?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"worker")," - method is added to route with all http methods (GET,POST etc) and route is '/${method_name}'. For our example - route will be : '/getuser'.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"defaultWorker")," - method having decorator defaultWorker is added to route with one http method GET. And the route is '/'."))),(0,o.kt)("p",null,"So in the above example, when url will be - "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"abc.com/user - method ",(0,o.kt)("inlineCode",{parentName:"li"},"default")," will be called."),(0,o.kt)("li",{parentName:"ul"},"abc.com/user/getuser - method ",(0,o.kt)("inlineCode",{parentName:"li"},"getUser")," will be called.")),(0,o.kt)("h2",{id:"default-worker-implementation"},"default worker implementation"),(0,o.kt)("p",null,"A method can be declared as default worker by using decorators - ",(0,o.kt)("inlineCode",{parentName:"p"},"worker")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"route"),"."),(0,o.kt)("p",null,"Lets update the example -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Controller, worker, textResult, HTTP_METHOD, route } from "fortjs";\n\nexport class UserController extends Controller {\n    \n   // @defaultWorker()\n    @worker(HTTP_METHOD.Get)\n    @route("/")\n    async default () {\n       return textResult("This is default worker for section user");\n    }\n}\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/docs/route"},"route")," allows you to customize the path of worker or end point."))}c.isMDXComponent=!0}}]);