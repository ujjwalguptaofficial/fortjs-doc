"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[2614],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,y=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(y,s(s({ref:t},l),{},{components:r})):n.createElement(y,s({ref:t},l))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4596:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"Query",keywords:["query string","variable","fortjs","node"],description:"Accessing query string value in fortjs"},s="query",i={unversionedId:"concepts/query",id:"concepts/query",title:"Query",description:"Accessing query string value in fortjs",source:"@site/docs/concepts/query.md",sourceDirName:"concepts",slug:"/concepts/query",permalink:"/docs/concepts/query",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/concepts/query.md",tags:[],version:"current",frontMatter:{title:"Query",keywords:["query string","variable","fortjs","node"],description:"Accessing query string value in fortjs"},sidebar:"tutorialSidebar",previous:{title:"Param",permalink:"/docs/concepts/param"},next:{title:"Session",permalink:"/docs/concepts/session"}},u={},c=[{value:"Inject Query String Data",id:"inject-query-string-data",level:2}],l={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query"},"query"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"query")," can be used to get the query string value. It is class member of  Wall, Guard, Shield and Controller."),(0,a.kt)("p",null,"e.g - Conside the url - abc.com/?userid=5&name=ujjwal"),(0,a.kt)("p",null,"There are two variables in query string - ",(0,a.kt)("inlineCode",{parentName:"p"},"userid")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," . We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"query")," to access those value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"export class DefaultController extends Controller {\n\n    @defaultWorker()\n    async default() {\n        const userId = this.query.userid;\n        const name = this.query.name;\n\n        return textResult(`userId is ${userId} & name is ${name}`);\n    }\n}\n")),(0,a.kt)("h2",{id:"inject-query-string-data"},"Inject Query String Data"),(0,a.kt)("p",null,"You can inject query string data into components or controller methods for easy access to HTTP request query string data."),(0,a.kt)("p",null,"To achieve this, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@asQuery")," decorator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Controller, http, textResult, asQuery } from "fortjs";\n\nexport class UserController extends Controller {\n\n    @http.get("/user-info")\n    //highlight-next-line\n    async getUserInfo(@asQuery() queryParams) {\n        // The \'queryParams\' parameter now contains the data from the HTTP query string\n        console.log(queryParams);\n\n        // Your logic for processing user information\n        // ...\n\n        return textResult("User information retrieved successfully");\n    }\n}\n')),(0,a.kt)("p",null,"In this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"@asQuery()")," decorator is used on the ",(0,a.kt)("inlineCode",{parentName:"p"},"queryParams")," parameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"getUserInfo")," method. This automatically injects the data from the HTTP query string into the ",(0,a.kt)("inlineCode",{parentName:"p"},"queryParams")," parameter. You can then use this data within your method to perform the desired logic, such as processing user information in this case."),(0,a.kt)("p",null,"Please ensure that the structure of the ",(0,a.kt)("inlineCode",{parentName:"p"},"queryParams")," object aligns with the expected format and content of the data sent in the HTTP query string."))}d.isMDXComponent=!0}}]);