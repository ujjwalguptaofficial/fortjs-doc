"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[6764],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(s,".").concat(h)]||p[h]||u[h]||l;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4769:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const l={Title:"Shield",Keywords:"shield, component, modular, fortjs, node",Description:"Description about Shield component & how to use"},a="Shield",i={unversionedId:"components/shield",id:"components/shield",title:"Shield",description:"Shield is security layer on top of Controller. It controls whether a request should be allowed to enter inside the Controller or not.",source:"@site/docs/components/shield.md",sourceDirName:"components",slug:"/components/shield",permalink:"/fortjs-doc/docs/components/shield",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/components/shield.md",tags:[],version:"current",frontMatter:{Title:"Shield",Keywords:"shield, component, modular, fortjs, node",Description:"Description about Shield component & how to use"},sidebar:"tutorialSidebar",previous:{title:"Guard",permalink:"/fortjs-doc/docs/components/guard"},next:{title:"Wall",permalink:"/fortjs-doc/docs/components/wall"}},s={},c=[{value:"Creating shield",id:"creating-shield",level:2},{value:"Example",id:"example",level:3},{value:"Summary",id:"summary",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"shield"},"Shield"),(0,o.kt)("p",null,"Shield is security layer on top of Controller. It controls whether a request should be allowed to enter inside the Controller or not. "),(0,o.kt)("p",null,"It can be used for -"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Doing some task before passing it to Controller"),(0,o.kt)("li",{parentName:"ul"},"Authentication on controller level")),(0,o.kt)("p",null,'e.g - Consider a case - where a controller "Admin" is only allowed if the request is authenticated. You can create a shield which will check for the conditions and if it does not satisfy the conditions, you can just reject it.'),(0,o.kt)("p",null,"There can be multiple shield for a controller & every shield is called in the same order as they are defined."),(0,o.kt)("p",null,"A shield has following member - "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/fortjs-doc/docs/types/http-request"},"Request")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/fortjs-doc/docs/types/http-response"},"Response")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/fortjs-doc/docs/concepts/cookie"},"Cookie")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/fortjs-doc/docs/concepts/session"},"Session")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/fortjs-doc/docs/concepts/query"},"Query data")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/fortjs-doc/docs/concepts/data"},"Data from other components")),(0,o.kt)("li",{parentName:"ul"},"Target Worker Name")),(0,o.kt)("h2",{id:"creating-shield"},"Creating shield"),(0,o.kt)("p",null,"Shield is a class which extends the class ",(0,o.kt)("inlineCode",{parentName:"p"},"Shield")," from fortjs. It has ",(0,o.kt)("inlineCode",{parentName:"p"},"protect")," method as lifecycle of Shield. "),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"protect")," method can perform any task such as validation etc and return the result. The method can return two types of data - "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"null")," - It means shield has passed the request."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Http response")," - It means shield has rejected the request. The http resonse is directly returned to the user.")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Shield, textResult } from "fortjs";\n\nexport class AuthenticationShield extends Shield {\n    async protect() {\n         \n        const isExist = await this.session.isExist(\'userId\');\n\n        if (exist) { // user is authenticated so allow\n            return null;\n\n        } else { //user is not authenticated, so not allow\n    \n            return textResult("Requires authentication", HTTP_STATUS_CODE.BadRequest);\n        }\n\n    }\n}\n')),(0,o.kt)("p",null,"Now let's use this shield to some controller."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Controller, shields } from "fortjs";\nimport { AuthenticationShield } from "location where shield is defined";\n\n@shields(AuthenticationShield) \nexport class UserController extends Controller {\n\n}\n')),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A shield allows you to execute logic before accessing to controller."),(0,o.kt)("li",{parentName:"ul"},"It can be used for controller level task like authentication etc."),(0,o.kt)("li",{parentName:"ul"},"A shield can be assigned to multiple controller. e.g - A generic autherization shield can be placed on all controller where authentication is required.")))}u.isMDXComponent=!0}}]);