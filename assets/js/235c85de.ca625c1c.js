"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[1870],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,s(s({ref:t},l),{},{components:r})):n.createElement(f,s({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4001:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:2,title:"Param",keywords:["param","route","url param","fortjs","node"],description:"parameterizing route in fortjs"},s="param",i={unversionedId:"concepts/param",id:"concepts/param",title:"Param",description:"parameterizing route in fortjs",source:"@site/docs/concepts/param.md",sourceDirName:"concepts",slug:"/concepts/param",permalink:"/docs/concepts/param",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/concepts/param.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Param",keywords:["param","route","url param","fortjs","node"],description:"parameterizing route in fortjs"},sidebar:"tutorialSidebar",previous:{title:"Query",permalink:"/docs/concepts/query"},next:{title:"Http Body",permalink:"/docs/concepts/body"}},c={},p=[{value:"Inject Path Parameters",id:"inject-path-parameters",level:2}],l={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"param"},"param"),(0,a.kt)("p",null,"you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"param")," to extract route data for variable routing. It is class member of Guard and Controller. "),(0,a.kt)("p",null,'e.g - consider the route - "abc.com/{value}/hi" . Here value is a variable and this can be extracted using param. '),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { http, Controller} from "fortjs";\nexport class FileController extends Controller {\n   \n    @http.get("/scripts/{file}.js")\n    async getScripts() {\n        const fileName = this.param.file;\n    }\n}\n')),(0,a.kt)("p",null,"For more info about routing, please check the ",(0,a.kt)("a",{parentName:"p",href:"/docs/route"},"route")," doc."),(0,a.kt)("h2",{id:"inject-path-parameters"},"Inject Path Parameters"),(0,a.kt)("p",null,"You can inject path parameters into components or controller methods for easy access to values specified in the URL path."),(0,a.kt)("p",null,"To achieve this, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@asParam")," decorator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Controller, http, textResult, asParam } from "fortjs";\n\nexport class UserController extends Controller {\n\n    @http.get("/user/{userId}")\n    async getUserById(@asParam params) {\n        // The \'params\' object contains all path parameters\n        const userId = params.userId;\n        console.log(userId);\n\n        // Your logic for processing user information based on the user ID\n        // ...\n\n        return textResult(`User information for ID ${userId} retrieved successfully`);\n    }\n}\n')),(0,a.kt)("p",null,"In this corrected example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"@asParam")," decorator without any arguments injects the entire ",(0,a.kt)("inlineCode",{parentName:"p"},"params")," object. You can then access specific path parameters using their names as properties of the ",(0,a.kt)("inlineCode",{parentName:"p"},"params")," object, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"params.userId")," in this case."))}m.isMDXComponent=!0}}]);