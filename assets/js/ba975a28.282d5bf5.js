"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[5825],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=o,m=c["".concat(i,".").concat(d)]||c[d]||h[d]||a;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:o,s[1]=l;for(var p=2;p<a;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},157:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:3,title:"Route",keywords:["Rest api route","route configuration","route handling","url mapping","Routing in fortjs"],description:"Explore the documentation for a specific route in Fort.js, including details on the associated controller route and HTTP route. Understand the purpose and usage of this route to efficiently handle incoming requests and enhance your Fort.js application."},s="Route",l={unversionedId:"route",id:"route",title:"Route",description:"Explore the documentation for a specific route in Fort.js, including details on the associated controller route and HTTP route. Understand the purpose and usage of this route to efficiently handle incoming requests and enhance your Fort.js application.",source:"@site/docs/route.md",sourceDirName:".",slug:"/route",permalink:"/docs/route",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/route.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Route",keywords:["Rest api route","route configuration","route handling","url mapping","Routing in fortjs"],description:"Explore the documentation for a specific route in Fort.js, including details on the associated controller route and HTTP route. Understand the purpose and usage of this route to efficiently handle incoming requests and enhance your Fort.js application."},sidebar:"tutorialSidebar",previous:{title:"Controller",permalink:"/docs/controller"},next:{title:"Validation",permalink:"/docs/validation"}},i={},p=[{value:"Create controller",id:"create-controller",level:2},{value:"Create Http Route",id:"create-http-route",level:2},{value:"HTTP GET",id:"http-get",level:3},{value:"HTTP POST",id:"http-post",level:3}],u={toc:p},c="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"route"},"Route"),(0,o.kt)("p",null,"In the context of web frameworks a ",(0,o.kt)("strong",{parentName:"p"},"route")," refers to a mapping between a URL pattern and a specific piece of code (usually a controller method) that should be executed when that URL is requested. Routes define how an application responds to different HTTP requests."),(0,o.kt)("p",null,"In Fort.js, a route consists of two parts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Controller route:")," The route associated with the class."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"HTTP route:")," The route associated with the method inside the class.")),(0,o.kt)("p",null,"This distinction helps organize and structure the routing configuration in Fortjs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Rest API")),(0,o.kt)("p",null,"Let's understand routing configuration by creating a ",(0,o.kt)("strong",{parentName:"p"},"Rest API")," : A User rest api"),(0,o.kt)("h2",{id:"create-controller"},"Create controller"),(0,o.kt)("p",null,"The first step is to create a controller and associate it with a controller route. Let's name it - ",(0,o.kt)("inlineCode",{parentName:"p"},"UserController")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller,} from "fortjs";\n\nexport class UserController extends Controller {\n\n}\n')),(0,o.kt)("p",null,"The second step is to associate with it a path and add this to ",(0,o.kt)("inlineCode",{parentName:"p"},"Fort.routes")," array -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Fort } from "fortjs";\nimport { UserController } from "@/controllers";\n\n// here we have mapped UserController with path "/user"\nFort.routes = [{\n    controller: UserController,\n    path: "/user"\n}]\n\nawait Fort.create();\n\n')),(0,o.kt)("p",null,'Here we have used path "/user", which means - ',(0,o.kt)("inlineCode",{parentName:"p"},"UserController"),' will be executed when path "/user" will be called.'),(0,o.kt)("h2",{id:"create-http-route"},"Create Http Route"),(0,o.kt)("p",null,"HTTP routes in Fortjs serve as endpoints that are tightly linked with controller methods. When a specific endpoint is invoked, the corresponding method in the associated controller is executed. "),(0,o.kt)("p",null,"A special decorator ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," is used to -"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"define which ",(0,o.kt)("strong",{parentName:"li"},"Http Method"),"` you want to support for your end point. "),(0,o.kt)("li",{parentName:"ol"},"path of your endpoint")),(0,o.kt)("p",null,"now let's create some endpoints for our rest API."),(0,o.kt)("h3",{id:"http-get"},"HTTP GET"),(0,o.kt)("p",null,"Let's define our first route to fetch all users. Our objective is to trigger the associated controller method when the URL is 'http://localhost:4000/user/all'."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Controller, http, jsonResult} from "fortjs";\n\nexport class UserController extends Controller {\n\n    // highlight-start\n    @http.get("/all")\n    fetchAllUsers(){\n        const allUsers = [];\n        return jsonResult(allUsers);\n    }\n    // highlight-end\n}\n')),(0,o.kt)("p",null,"In the code snippet, we've created a ",(0,o.kt)("strong",{parentName:"p"},"UserController")," with a method called ",(0,o.kt)("strong",{parentName:"p"},"fetchAllUsers"),'. This method is linked to the path "/all" and HTTP method ',(0,o.kt)("strong",{parentName:"p"},"GET")," using the decorator ",(0,o.kt)("inlineCode",{parentName:"p"},'@http.get("/all")'),". Therefore, it will be triggered when the URL is 'http://localhost:4000/user/all'"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Wondering about the presence of '/user' in the route 'http://localhost:4000/user/all'? It's the controller route we configured in the controller section. This setup offers a neat structure for organizing related routes under the common path '/user'.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," We won't delve into the details of the logic for fetching the user, as covering the logical part is beyond the scope of this documentation."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Now let's create an endpoint that will return the user by ID. Our objective is to trigger the method when the URL is 'http://localhost:4000/user/1', where 1 is the user's ID. This ID can vary, for example, the user ID can be 2, 3, 4, etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, jsonResult} from "fortjs";\n\nexport class UserController extends Controller {\n\n    @http.get("/all")\n    fetchAllUsers(){\n        const allUsers = [];\n        return jsonResult(allUsers);\n    }\n\n    // highlight-start\n    @http.get("/{userId}")\n    fetchUserById(){\n        const userId = this.param.userId;\n        const user = {};\n        return jsonResult(user);\n    }\n    // highlight-end\n}\n')),(0,o.kt)("p",null,"In the above snippet, we have created a method fetchUserById. This method is linked to the path \"/{userId}\" and HTTP method GET using the decorator @http.get(\"/{userId}\"). Therefore, it will be triggered when the URL is 'http://localhost:4000/user/1' or 'http://localhost:4000/user/2'."),(0,o.kt)("p",null,"This covers our GET route customization. Now let's learn about POST route."),(0,o.kt)("h3",{id:"http-post"},"HTTP POST"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The POST HTTP method is used to submit or send data to the specified resource. When a client makes a POST request, the data is included in the body of the request. ")),(0,o.kt)("p",null,"Let's create an endpoint for creating a user. Our objective is to execute the 'createUser' method when the URL is 'http://localhost:4000/user' and the HTTP method is ",(0,o.kt)("strong",{parentName:"p"},"POST")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, jsonResult} from "fortjs";\n\nexport class UserController extends Controller {\n\n    @http.get("/all")\n    fetchAllUsers(){\n        const allUsers = [];\n        return jsonResult(allUsers);\n    }\n\n    @http.get("/{userId}")\n    fetchUserById(){\n        const userId = this.param.userId;\n        const user = {};\n        return jsonResult(user);\n    }\n\n    // highlight-start\n    @http.post("/")\n    createUser(){\n        const newUserData = this.body;\n        return jsonResult(newUserData);\n    }\n    // highlight-end\n}\n')),(0,o.kt)("p",null,'In the above snippet, we have created a method createUser. This method is linked to the path "/" and HTTP method ',(0,o.kt)("strong",{parentName:"p"},"POST")," using the decorator @http.post(\"/\"). Therefore, it will be triggered when the URL is 'http://localhost:4000/user' and HTTP method is ",(0,o.kt)("strong",{parentName:"p"},"POST")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"In addition to the examples mentioned earlier, you can utilize other HTTP methods as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Patch: ",(0,o.kt)("inlineCode",{parentName:"li"},"@http.patch")),(0,o.kt)("li",{parentName:"ul"},"Put: ",(0,o.kt)("inlineCode",{parentName:"li"},"@http.put")),(0,o.kt)("li",{parentName:"ul"},"Delete: ",(0,o.kt)("inlineCode",{parentName:"li"},"@http.delete"))),(0,o.kt)("p",null,"Feel free to incorporate these methods into your routes as needed."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"\ud83d\ude80 Explore a Complete REST API Implementation Example \ud83d\ude80"),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/ujjwalguptaofficial/fortjs-examples/tree/master/rest"},"Fort.js REST API Examples")),(0,o.kt)("p",{parentName:"admonition"},"Feel free to dive into this comprehensive example to see how Fort.js can be used to build RESTful APIs.")))}h.isMDXComponent=!0}}]);