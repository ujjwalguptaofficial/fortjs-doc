"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Get started","href":"/fortjs-doc/docs/get-started","docId":"get-started"},{"type":"link","label":"Controller","href":"/fortjs-doc/docs/controller","docId":"controller"},{"type":"link","label":"Worker","href":"/fortjs-doc/docs/worker","docId":"worker"},{"type":"link","label":"Route","href":"/fortjs-doc/docs/route","docId":"route"},{"type":"link","label":"Setup","href":"/fortjs-doc/docs/setup","docId":"setup"},{"type":"link","label":"View","href":"/fortjs-doc/docs/view","docId":"view"},{"type":"link","label":"Validation","href":"/fortjs-doc/docs/validation","docId":"validation"},{"type":"link","label":"Authentication","href":"/fortjs-doc/docs/authentication","docId":"authentication"},{"type":"link","label":"Logger","href":"/fortjs-doc/docs/logger","docId":"logger"},{"type":"link","label":"Middleware","href":"/fortjs-doc/docs/middleware","docId":"middleware"},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Guard","href":"/fortjs-doc/docs/components/guard","docId":"components/guard"},{"type":"link","label":"Shield","href":"/fortjs-doc/docs/components/shield","docId":"components/shield"},{"type":"link","label":"Wall","href":"/fortjs-doc/docs/components/wall","docId":"components/wall"}],"href":"/fortjs-doc/docs/components/"},{"type":"category","label":"Decorators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"expectBody","href":"/fortjs-doc/docs/decorators/expect-body","docId":"decorators/expect-body"},{"type":"link","label":"expectQuery","href":"/fortjs-doc/docs/decorators/expect-query","docId":"decorators/expect-query"}],"href":"/fortjs-doc/docs/decorators/"},{"type":"category","label":"Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Body","href":"/fortjs-doc/docs/concepts/body","docId":"concepts/body"},{"type":"link","label":"Cookie","href":"/fortjs-doc/docs/concepts/cookie","docId":"concepts/cookie"},{"type":"link","label":"Data","href":"/fortjs-doc/docs/concepts/data","docId":"concepts/data"},{"type":"link","label":"Dependency Injection","href":"/fortjs-doc/docs/concepts/dependency-injection","docId":"concepts/dependency-injection"},{"type":"link","label":"File","href":"/fortjs-doc/docs/concepts/file","docId":"concepts/file"},{"type":"link","label":"param","href":"/fortjs-doc/docs/concepts/param","docId":"concepts/param"},{"type":"link","label":"query","href":"/fortjs-doc/docs/concepts/query","docId":"concepts/query"},{"type":"link","label":"Session","href":"/fortjs-doc/docs/concepts/session","docId":"concepts/session"}]},{"type":"category","label":"Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HttpFormatResult","href":"/fortjs-doc/docs/types/http-format-result","docId":"types/http-format-result"},{"type":"link","label":"HttpRequest","href":"/fortjs-doc/docs/types/http-request","docId":"types/http-request"},{"type":"link","label":"HttpResponse","href":"/fortjs-doc/docs/types/http-response","docId":"types/http-response"},{"type":"link","label":"HttpResult","href":"/fortjs-doc/docs/types/http-result","docId":"types/http-result"},{"type":"link","label":"ViewEngineData","href":"/fortjs-doc/docs/types/view-engine-data","docId":"types/view-engine-data"}]},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Customize Error","href":"/fortjs-doc/docs/advanced/customize-error","docId":"advanced/customize-error"},{"type":"link","label":"Format response","href":"/fortjs-doc/docs/advanced/format-response","docId":"advanced/format-response"},{"type":"link","label":"GraphQl","href":"/fortjs-doc/docs/advanced/graphql","docId":"advanced/graphql"},{"type":"link","label":"Session Provider","href":"/fortjs-doc/docs/advanced/session-provider","docId":"advanced/session-provider"},{"type":"link","label":"Socket.io Configuration","href":"/fortjs-doc/docs/advanced/socket-io","docId":"advanced/socket-io"},{"type":"link","label":"View Engine","href":"/fortjs-doc/docs/advanced/view-engine","docId":"advanced/view-engine"},{"type":"link","label":"XmlParser","href":"/fortjs-doc/docs/advanced/xml-parser","docId":"advanced/xml-parser"}]},{"type":"category","label":"Swagger","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Initiate Swagger","href":"/fortjs-doc/docs/swagger/initiate","docId":"swagger/initiate"},{"type":"link","label":"Swagger Model","href":"/fortjs-doc/docs/swagger/model","docId":"swagger/model"}],"href":"/fortjs-doc/docs/swagger/"},{"type":"link","label":"Deployment Best Practice","href":"/fortjs-doc/docs/deployment","docId":"deployment"},{"type":"category","label":"Test","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"E2E Test","href":"/fortjs-doc/docs/test/e2e-test","docId":"test/e2e-test"},{"type":"link","label":"initialize","href":"/fortjs-doc/docs/test/initialize","docId":"test/initialize"},{"type":"link","label":"Unit test","href":"/fortjs-doc/docs/test/unit-test","docId":"test/unit-test"}],"href":"/fortjs-doc/docs/test/"}]},"docs":{"advanced/customize-error":{"id":"advanced/customize-error","title":"Customize Error","description":"In order to customize the error response , you need to create a class which extend class ErrorHandler and override the available methods.","sidebar":"tutorialSidebar"},"advanced/format-response":{"id":"advanced/format-response","title":"Format response","description":"You can customize the format of your response and based on content negotiation fortjs select the appropriate response. If an appropriate response is not found then a response with status code - 406 is returned.","sidebar":"tutorialSidebar"},"advanced/graphql":{"id":"advanced/graphql","title":"GraphQl","description":"FortJs provides a seperate package - fort-graphql for integration of graphql.","sidebar":"tutorialSidebar"},"advanced/session-provider":{"id":"advanced/session-provider","title":"Session Provider","description":"By default fortjs provides a memory session provider which stores all your data in memory & data is lost when nodejs process is stopped or restarted.","sidebar":"tutorialSidebar"},"advanced/socket-io":{"id":"advanced/socket-io","title":"Socket.io Configuration","description":"Socket.IO enables real-time, bidirectional and event-based communication.","sidebar":"tutorialSidebar"},"advanced/view-engine":{"id":"advanced/view-engine","title":"View Engine","description":"In order to create a view engine - You need to create a class which will implement class ViewEngine from \\"fortjs\\".","sidebar":"tutorialSidebar"},"advanced/xml-parser":{"id":"advanced/xml-parser","title":"XmlParser","description":"By default FortJs doesn\'t handle xml data in http body but can be configured very easily.","sidebar":"tutorialSidebar"},"authentication":{"id":"authentication","title":"Authentication","description":"There are multiple ways in which we can authenticate. In this doc guide - we will learn how to do session authentication based on userid/password combination.","sidebar":"tutorialSidebar"},"components/components":{"id":"components/components","title":"Components","description":"Components are most important part of fort application. They are independent & every component has its own lifecycle and scope. It helps you to modularize your app & reutilize codes.","sidebar":"tutorialSidebar"},"components/guard":{"id":"components/guard","title":"Guard","description":"Guard is security layer on top of Worker which means it is called after controller is initiated. It contols whether a request should be allowed to call the Worker.","sidebar":"tutorialSidebar"},"components/shield":{"id":"components/shield","title":"Shield","description":"Shield is security layer on top of Controller. It controls whether a request should be allowed to enter inside the Controller or not.","sidebar":"tutorialSidebar"},"components/wall":{"id":"components/wall","title":"Wall","description":"Wall is a top layer for every http request. It controls whether a request should be allowed or not. It can also be used to do some tasks and pass data inside Controller.","sidebar":"tutorialSidebar"},"concepts/body":{"id":"concepts/body","title":"Body","description":"body is class member of Guard and Controller. It is used to access body data sent in http post request.","sidebar":"tutorialSidebar"},"concepts/cookie":{"id":"concepts/cookie","title":"Cookie","description":"cookie is class member of Wall, Guard , Shield and Controller.","sidebar":"tutorialSidebar"},"concepts/data":{"id":"concepts/data","title":"Data","description":"data is class member of Wall, Guard , Shield and Controller. It is used to transfer data from one component to another till worker.","sidebar":"tutorialSidebar"},"concepts/dependency-injection":{"id":"concepts/dependency-injection","title":"Dependency Injection","description":"Dependency Injection is a process of injecting dependency into different parts by framework. it allows to write unit testable code.","sidebar":"tutorialSidebar"},"concepts/file":{"id":"concepts/file","title":"File","description":"You can use file to access http request files. It is class member of  Guard ,Shield and Controller.","sidebar":"tutorialSidebar"},"concepts/param":{"id":"concepts/param","title":"param","description":"you can use param to extract route data for variable routing. It is class member of Guard and Controller.","sidebar":"tutorialSidebar"},"concepts/query":{"id":"concepts/query","title":"query","description":"query can be used to get the query string value. It is class member of  Wall, Guard, Shield and Controller.","sidebar":"tutorialSidebar"},"concepts/session":{"id":"concepts/session","title":"Session","description":"Session is a State Management Technique. It enables you to store and retrieve values for a user as the user navigates pages in a Web application.","sidebar":"tutorialSidebar"},"controller":{"id":"controller","title":"Controller","description":"A Controller is a class which contains methods to be used as end points or routes. You can consider it like a section where different resource and services are available.","sidebar":"tutorialSidebar"},"decorators/decorators":{"id":"decorators/decorators","title":"Decorators","description":"FortJs provides following decorators -","sidebar":"tutorialSidebar"},"decorators/expect-body":{"id":"decorators/expect-body","title":"expectBody","description":"expectBody helps you to validate http request body data. It has following features -","sidebar":"tutorialSidebar"},"decorators/expect-query":{"id":"decorators/expect-query","title":"expectQuery","description":"expectQuery helps you to validate query string data. It provides following features -","sidebar":"tutorialSidebar"},"deployment":{"id":"deployment","title":"Deployment Best Practice","description":"Few things to note when you are deploying your app to production -","sidebar":"tutorialSidebar"},"get-started":{"id":"get-started","title":"Get started","description":"In this get started tutorial - we will see how to setup the project.","sidebar":"tutorialSidebar"},"logger":{"id":"logger","title":"Logger","description":"Logging is a required part of development. We log for debugging, saving exception, information etc.","sidebar":"tutorialSidebar"},"middleware":{"id":"middleware","title":"Middleware","description":"Middleware is a technique which is heavily used in nodejs frameworks like express etc. It is based on chain of responsibility pattern means one middleware will call another.","sidebar":"tutorialSidebar"},"route":{"id":"route","title":"Route","description":"A route is basically a path. It is mapped with Controller and will target a Controller method.","sidebar":"tutorialSidebar"},"setup":{"id":"setup","title":"Setup","description":"Bootstrapping fortjs is very easy. The minimal requirement is to define a route - that\'s all. After that you can use different configuration to customize as per your need.","sidebar":"tutorialSidebar"},"swagger/initiate":{"id":"swagger/initiate","title":"Initiate Swagger","description":"FortJs provides a seperate library - fortjs-swagger for swagger integration. It provides automatic generation of swagger documents by taking documents related information from you.","sidebar":"tutorialSidebar"},"swagger/model":{"id":"swagger/model","title":"Swagger Model","description":"A model is a class which represents data. It represents what data will return on different responses.","sidebar":"tutorialSidebar"},"swagger/swagger":{"id":"swagger/swagger","title":"Swagger","description":"Swagger is an open-source software framework backed by a large ecosystem of tools that helps developers design, build, document, and consume RESTful Web services.","sidebar":"tutorialSidebar"},"test/e2e-test":{"id":"test/e2e-test","title":"E2E Test","description":"For e2e test - we recommend to use Axios. But feel free to use your favourite http client library.","sidebar":"tutorialSidebar"},"test/initialize":{"id":"test/initialize","title":"initialize","description":"initialize is a method in a controller which initializes a controller & set the controller property provided in param. This is helpful when you are doing unit testing where you want to set the controller properties.","sidebar":"tutorialSidebar"},"test/test":{"id":"test/test","title":"Test","description":"Setting up test configuration is very easy in FortJs, infact Fortjs already provides setup configuration for unit testing and e2e testing.","sidebar":"tutorialSidebar"},"test/unit-test":{"id":"test/unit-test","title":"Unit test","description":"As the codes written in fortjs are simple & clean, we want similar approach for test cases.","sidebar":"tutorialSidebar"},"types/http-format-result":{"id":"types/http-format-result","title":"HttpFormatResult","description":"The type HttpFormatResult is used for formatting http response.","sidebar":"tutorialSidebar"},"types/http-request":{"id":"types/http-request","title":"HttpRequest","description":"The type HttpRequest is used for accessing request resources like url, headers etc.","sidebar":"tutorialSidebar"},"types/http-response":{"id":"types/http-response","title":"HttpResponse","description":"","sidebar":"tutorialSidebar"},"types/http-result":{"id":"types/http-result","title":"HttpResult","description":"The type HttpResult is used by workers to return the result.","sidebar":"tutorialSidebar"},"types/view-engine-data":{"id":"types/view-engine-data","title":"ViewEngineData","description":"The type ViewEngineData is used by ViewEngine to get view related data from workers.","sidebar":"tutorialSidebar"},"validation":{"id":"validation","title":"Validation","description":"Validation is an important part of any application & that\'s why fortjs provides several components and decorators to help you write validation code in easy & standard way.","sidebar":"tutorialSidebar"},"view":{"id":"view","title":"View","description":"A view is a HTML page which needs some data also called model to show those datas to users.The data(model) is passed from controller to view where view engine accepts the data and create the html page.","sidebar":"tutorialSidebar"},"worker":{"id":"worker","title":"Worker","description":"Worker is a class method which acts as end point. It does particular task and return the final result.","sidebar":"tutorialSidebar"}}}')}}]);