"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[631],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={title:"File",keywords:["Fort.js","File Handling","File Upload","Web Development"],description:"Explore file handling capabilities in Fort.js, including file uploads and storage. Learn how to implement robust file handling functionality for your web application."},l="File Handling",a={unversionedId:"concepts/file",id:"concepts/file",title:"File",description:"Explore file handling capabilities in Fort.js, including file uploads and storage. Learn how to implement robust file handling functionality for your web application.",source:"@site/docs/concepts/file.md",sourceDirName:"concepts",slug:"/concepts/file",permalink:"/docs/concepts/file",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/concepts/file.md",tags:[],version:"current",frontMatter:{title:"File",keywords:["Fort.js","File Handling","File Upload","Web Development"],description:"Explore file handling capabilities in Fort.js, including file uploads and storage. Learn how to implement robust file handling functionality for your web application."},sidebar:"tutorialSidebar",previous:{title:"Data",permalink:"/docs/concepts/data"},next:{title:"Param",permalink:"/docs/concepts/param"}},s={},p=[{value:"File Upload",id:"file-upload",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"file-handling"},"File Handling"),(0,i.kt)("p",null,"To facilitate file uploads, utilize the ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," property, accessible as a class member within ",(0,i.kt)("inlineCode",{parentName:"p"},"Guard"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Shield"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Controller"),". This property provides convenient access to the files included in the HTTP request."),(0,i.kt)("h2",{id:"file-upload"},"File Upload"),(0,i.kt)("p",null,"Let's explore the process of uploading a file in Fort.js:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, textResult, http } from "fortjs";\nimport * as Path from "path";\n\nexport class FileController extends Controller {\n   \n    @http.post("/upload")\n    async uploadFile() {\n\n        let result;\n        // Check if a file exists in the HTTP request\n        if (this.file.isExist(\'jsstore\') === true) {\n            // Save the file to the desired location\n\n            const pathToSave = Path.join(__dirname, "../upload.png");\n            //highlight-start\n            // Supply the filename from the request and the path to save\n            await this.file.saveTo(\'jsstore\', pathToSave);\n            //highlight-end\n            result = "File saved";\n        } else {\n            result = "File not saved";\n        }\n        return textResult(result);\n    }    \n}\n')),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"uploadFile")," method handles file uploads. It checks if a file named 'jsstore' is present in the HTTP request. If the file exists, it is saved to a specified location. Adjust the filename and path as needed for your application. The process ensures a seamless file upload mechanism in Fort.js."))}d.isMDXComponent=!0}}]);