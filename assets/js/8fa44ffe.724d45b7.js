"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[8680],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=s,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1950:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),s=(n(7294),n(3905));const o={title:"Unit Test",keywords:["test","unit","e2e","fortjs","node"],description:"Setting up unit test in fortjs"},a="Unit test",i={unversionedId:"test/unit-test",id:"test/unit-test",title:"Unit Test",description:"Setting up unit test in fortjs",source:"@site/docs/test/unit-test.md",sourceDirName:"test",slug:"/test/unit-test",permalink:"/fortjs-doc/docs/test/unit-test",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/test/unit-test.md",tags:[],version:"current",frontMatter:{title:"Unit Test",keywords:["test","unit","e2e","fortjs","node"],description:"Setting up unit test in fortjs"},sidebar:"tutorialSidebar",previous:{title:"Initialize Controller",permalink:"/fortjs-doc/docs/test/initialize"},next:{title:"Decorator",permalink:"/fortjs-doc/docs/decorators/"}},l={},u=[{value:"Test code -",id:"test-code--",level:2}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"unit-test"},"Unit test"),(0,s.kt)("p",null,"As the codes written in fortjs are simple & clean, we want similar approach for test cases. "),(0,s.kt)("p",null,'Let\'s see one example for unit testing "UserController"- '),(0,s.kt)("p",null,"Consider UserController implments Rest Api & codes are - "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'import { Controller, textResult, defaultWorker, jsonResult, worker, route, HTTP_STATUS_CODE, HTTP_METHOD, guards, singleton } from \'fortjs\';\nimport { UserService } from \'@/services\';\nimport { ModelUserGuard } from \'@/guards\';\nimport { User } from \'@/models/user\';\n\nexport class UserController extends Controller {\n\n    service: UserService;\n\n    constructor(@singleton(UserService) service: UserService) {\n        super();\n        this.service = service;\n    }\n\n    @defaultWorker()\n    async getUsers() {\n        return jsonResult(this.service.getUsers());\n    }\n\n    @worker(HTTP_METHOD.Post)\n    @route("/")\n    @guards(ModelUserGuard)\n    async addUser() {\n        const user = this.data.user;\n        const newUser = this.service.addUser(user);\n        return jsonResult(newUser, HTTP_STATUS_CODE.Created);\n    }\n\n    @worker(HTTP_METHOD.Put)\n    @route("/")\n    async updateUser() {\n        const user = new User().init(this.body);\n        const userUpdated = this.service.updateUser(user);\n        if (userUpdated === true) {\n            return textResult("user updated");\n        }\n        else {\n            return textResult("invalid user");\n        }\n\n    }\n\n    @worker(HTTP_METHOD.Get)\n    @route("/{id}")\n    async getUser() {\n\n        const userId = Number(this.param.id);\n        const user = new UserService().getUser(userId);\n        if (user == null) {\n            return textResult("invalid user id", HTTP_STATUS_CODE.NotFound);\n        }\n        return jsonResult(user);\n\n    }\n\n}\n')),(0,s.kt)("h2",{id:"test-code--"},"Test code -"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"describe('UserController', () => {\n    let controller;\n\n    beforeAll(async () => {\n        await createApp();\n        // UserController has dependency of UserService, which is injected by fortjs at run time. \n        \n        // Here UserService is a fake service in memory\n        controller = new UserController(new UserService());\n    });\n\n    it('getUsers', async () => {\n        controller.initialize();\n        const expectedResult = jsonResult(controller.service.getUsers());\n        const result = await controller.getUsers();\n        expect(result).toEqual(expectedResult);\n    });\n\n    it('addUser', async () => {\n        const newUser = {\n            name: 'ujjwal gupta',\n            emailId: 'ujjwal@m.com',\n            gender: 'male',\n            password: 'asdfvg',\n            address: 'Bangalore India'\n        };\n        controller.initialize({\n            data: {\n                user: newUser\n            }\n        });\n        const expectedResult = jsonResult(newUser, 201);\n        const result = await controller.addUser();\n        expect(result).toEqual(expectedResult);\n        expect(result.responseData).toEqual(newUser);\n    });\n\n    it('getUser', async () => {\n        controller.initialize({\n            param: {\n                id: '2'\n            }\n        });\n        const expectedResult = jsonResult(controller.service.getUser(2));\n        const result = await controller.getUsers();\n        expect(result).toEqual(expectedResult);\n    });\n\n    it('updateUser', async () => {\n        const userData = {\n            id: 2,\n            name: 'ujjwal gupta',\n            emailId: 'ujjwal@m.com',\n            gender: 'male',\n            password: 'asdfvg',\n            address: 'Bangalore India'\n        };\n        \n        // update user for existing data\n        controller.initialize({\n            body: {\n                user: userData\n            }\n        });\n        let expectedResult = await textResult(\"user updated\");\n        let result = await controller.updateUser();\n        expect(result).toEqual(expectedResult);\n\n        // update user for not existing data\n        userData.id = 5;\n        controller.initialize({\n            data: {\n                user: userData\n            }\n        });\n        expectedResult = textResult(\"invalid user\");\n        result = await controller.updateUser();\n        expect(result).toEqual(expectedResult);\n    });\n\n    afterAll(() => {\n        return Fort.destroy();\n    });\n});\n")),(0,s.kt)("p",null,"In the above code -"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"beforeAll"),' - We are configuring everything that we need bofore test starts in "beforeAll" hook of jest i.e - creating the UserController object and starting our app. The hook can be different in another framework.')),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"getUsers")," -  Here we have written code for testing getUsers. \"getUsers\" is a method which returns all the user presents. As you can see, the first line of the code is 'controller.initialize' - this is very important to call before any test case start. The 'initialize' method is present in every component i.e - controller, guard, wall & shield. This is used to initialize the controller with some value i.e setting body object, setting query string etc, basically to set the component props.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"addUser")," - \"addUser\" method takes user data from body & add a user. We are using 'controller.initialize' to supply the user information in body. But in code, we are actually supplying user information in ",(0,s.kt)("inlineCode",{parentName:"p"},"data")," but not ",(0,s.kt)("inlineCode",{parentName:"p"},"body"),' - this is because method "addUser" uses a Guard ',(0,s.kt)("inlineCode",{parentName:"p"},"ModelUserGuard")," which sends user info in ",(0,s.kt)("inlineCode",{parentName:"p"},"data"),' & the worker "addUser" uses data property of controller.')),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"updateUser")," -  \"updateUser\" method takes user data from body & update user if exist otherwise returns 'invalid user'. The test code initialise the controller using 'controller.initialize' & supply the user information in body. Here we are not using any guard (for explainining how to pass body i have removed guard from this method)."))),(0,s.kt)("p",null,"Hope this is clear & understandable. For help - please reach to our gitter channel."))}p.isMDXComponent=!0}}]);