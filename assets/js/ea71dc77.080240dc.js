"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[8035],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),l=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(r),y=n,m=d["".concat(c,".").concat(y)]||d[y]||u[y]||a;return r?o.createElement(m,s(s({ref:t},p),{},{components:r})):o.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=y;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}y.displayName="MDXCreateElement"},230:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=r(7462),n=(r(7294),r(3905));const a={Title:"Expect Body",Keywords:"body, secure body, validation, fortjs, node",Description:"This page tells about decorator ExpectBody & how to use this."},s="expectBody",i={unversionedId:"decorators/expect-body",id:"decorators/expect-body",title:"expectBody",description:"expectBody helps you to validate http request body data. It has following features -",source:"@site/docs/decorators/expect-body.md",sourceDirName:"decorators",slug:"/decorators/expect-body",permalink:"/fortjs-doc/docs/decorators/expect-body",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/decorators/expect-body.md",tags:[],version:"current",frontMatter:{Title:"Expect Body",Keywords:"body, secure body, validation, fortjs, node",Description:"This page tells about decorator ExpectBody & how to use this."},sidebar:"tutorialSidebar",previous:{title:"Decorators",permalink:"/fortjs-doc/docs/decorators/"},next:{title:"expectQuery",permalink:"/fortjs-doc/docs/decorators/expect-query"}},c={},l=[{value:"Check data type",id:"check-data-type",level:2},{value:"Removes unnecessary data from incoming body",id:"removes-unnecessary-data-from-incoming-body",level:2},{value:"1. We either save the whole data",id:"1-we-either-save-the-whole-data",level:3},{value:"2. Extract particular value from body",id:"2-extract-particular-value-from-body",level:3}],p={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"expectbody"},"expectBody"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"expectBody")," helps you to validate http request body data. It has following features -"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Check data type of incoming body data against expected body."),(0,n.kt)("li",{parentName:"ul"},"Removes unnecessary data from incoming body. This helps you to store data in nosql database without retrieving particular property and thus saving lots of code.")),(0,n.kt)("h2",{id:"check-data-type"},"Check data type"),(0,n.kt)("p",null,"Consider a post request which sends following data in request "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n    price:"1200",\n    name:"black jeans nike"\n}\n')),(0,n.kt)("p",null,"Here price being sent is 1200 which is string but server expects it to be number. In this case you will write codes to check for data type of ",(0,n.kt)("inlineCode",{parentName:"p"},"price")," property. "),(0,n.kt)("p",null,"But when using ",(0,n.kt)("inlineCode",{parentName:"p"},"expectBody")," it will automatically check the datatype & if not matches then returns a 400 request. This saves you writing code for validation of property type."),(0,n.kt)("p",null,"Let's see how to configure this using ",(0,n.kt)("inlineCode",{parentName:"p"},"expectBody")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'export class ProductController{\n\n    @route("/")\n    @worker("post")\n    @expectBody({ price:0, name:""})\n    saveProduct(){\n       const product =  this.body;\n    }\n}\n')),(0,n.kt)("p",null,"You can also provide a class as parameter. Make sure that class properties are initialized."),(0,n.kt)("p",null,"e.g - "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'export class Product {\n  price = 0;\n  name = ""\n}\n\nexport class ProductController{\n\n    @route("/")\n    @worker("post")\n    @expectBody(Product)\n    saveProduct(){\n       const product =  this.body;\n    }\n}\n')),(0,n.kt)("h2",{id:"removes-unnecessary-data-from-incoming-body"},"Removes unnecessary data from incoming body"),(0,n.kt)("p",null,"Consider a post request which sends following data in request "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{\n    name:"ujjwal gupta",\n    gender:"male",\n    extra:"some extra value" // some extra value which is not required\n}\n')),(0,n.kt)("p",null,"now for such requests -"),(0,n.kt)("h3",{id:"1-we-either-save-the-whole-data"},"1. We either save the whole data"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'export class UserController{\n\n    @route("/")\n    @worker("post")\n    saveUser(){\n       const user = this.body;\n       // save user into mongodb\n       const service = new UserService();\n       service.saveUser(user);\n    }\n}\n')),(0,n.kt)("p",null,"In this case - property ",(0,n.kt)("inlineCode",{parentName:"p"},"extra")," will be saved too & thus your database has now garbage value. This is a very big risk & you shouldn't save data this way when using nosql database."),(0,n.kt)("h3",{id:"2-extract-particular-value-from-body"},"2. Extract particular value from body"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'export class UserController{\n\n    @Route("/")\n    @Worker("post")\n    saveUser(){\n       const user = {\n           name:this.body.name,\n           gender: this.body.gender\n       } ;\n       // save user into mongodb\n       const service = new UserService();\n       service.saveUser(user);\n    }\n}\n')),(0,n.kt)("p",null,"this is a good way but consider user value with 10 properties which means you need to write 10 lines of code."),(0,n.kt)("p",null,"Instead you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"expectBody")," which will remove extra property from the body -"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'export class UserController{\n\n    @route("/")\n    @worker("post")\n    @expectBody({name:"", gender: ""})\n    saveUser(){\n       const user =  this.body;\n       // save user into mongodb\n       const service = new UserService();\n       service.saveUser(user);\n    }\n}\n')))}u.isMDXComponent=!0}}]);