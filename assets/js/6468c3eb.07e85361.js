"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[1709],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=u(r),m=l,f=p["".concat(i,".").concat(m)]||p[m]||c[m]||o;return r?n.createElement(f,s(s({ref:t},d),{},{components:r})):n.createElement(f,s({ref:t},d))}));function f(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=r.length,s=new Array(o);s[0]=m;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a[p]="string"==typeof e?e:l,s[1]=a;for(var u=2;u<o;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7303:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var n=r(7462),l=(r(7294),r(3905));const o={sidebar_position:7,title:"Http Result",keywords:["FortJs","HTTP Results","Text Result","JSON Result","HTML Result","View Result","File Result","Download Result","Redirect Result","Web Development","Node.js"],description:"Learn about different HTTP result types in FortJs, including text results, JSON results, HTML results, view results, file results, download results, and redirect results."},s="Http Result",a={unversionedId:"http-result",id:"http-result",title:"Http Result",description:"Learn about different HTTP result types in FortJs, including text results, JSON results, HTML results, view results, file results, download results, and redirect results.",source:"@site/docs/http-result.md",sourceDirName:".",slug:"/http-result",permalink:"/docs/http-result",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/http-result.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Http Result",keywords:["FortJs","HTTP Results","Text Result","JSON Result","HTML Result","View Result","File Result","Download Result","Redirect Result","Web Development","Node.js"],description:"Learn about different HTTP result types in FortJs, including text results, JSON results, HTML results, view results, file results, download results, and redirect results."},sidebar:"tutorialSidebar",previous:{title:"Database",permalink:"/docs/guides/database"},next:{title:"Bootstrap",permalink:"/docs/setup"}},i={},u=[{value:"Text data",id:"text-data",level:2},{value:"JSON data",id:"json-data",level:2},{value:"HTML data",id:"html-data",level:2},{value:"Redirect url",id:"redirect-url",level:2},{value:"Render file",id:"render-file",level:2},{value:"Download file",id:"download-file",level:2},{value:"Render a view file",id:"render-a-view-file",level:2}],d={toc:u},p="wrapper";function c(e){let{components:t,...r}=e;return(0,l.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"http-result"},"Http Result"),(0,l.kt)("p",null,"In a web server application, a common requirement is to return different types of results such as text, JSON, etc. FortJs provides various helper methods that make it easy to return results of different types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"textResult"),": Used to return a text result."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"jsonResult"),": Used to return a JSON result."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"htmlResult"),": Used to return an HTML result."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"viewResult"),": Used to return a view."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fileResult"),": Used to return a file that will be rendered by the browser."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"downloadResult"),": Used to return a file that will be downloaded by the browser."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"redirectResult"),": Used to return a result that instructs the browser to redirect to a URL.")),(0,l.kt)("h2",{id:"text-data"},"Text data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, textResult } from "fortjs";\n\nexport class MyController extends Controller {\n   \n    @http.get("/hello-world")\n    async default() {\n        // This method returns a simple text result with the content "Hello World".\n        return textResult("Hello World");\n    }\n}\n')),(0,l.kt)("h2",{id:"json-data"},"JSON data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, jsonResult } from "fortjs";\n\nexport class MyController extends Controller {\n   \n    @http.get("/hello-world")\n    async default() {\n        // This method returns a simple json data with the content "Hello World".\n        return jsonResult({\n            value: "Hello World"\n        });\n    }\n}\n')),(0,l.kt)("h2",{id:"html-data"},"HTML data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, htmlResult } from "fortjs";\n\nexport class MyController extends Controller {\n   \n    @http.get("/hello-world")\n    async default() {\n        // This method returns a simple html data with the content "Hello World".\n       return htmlResult(`<h1>Hello World</h1>`);\n    }\n}\n')),(0,l.kt)("h2",{id:"redirect-url"},"Redirect url"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, redirectResult } from "fortjs";\n\nexport class MyController extends Controller {\n   \n    @http.get("/hello-world")\n    async default() {\n        // This method returns url which tells browser to redirect to supplied url\n       return redirectResult(`https://fortjs.net/`);\n    }\n}\n')),(0,l.kt)("h2",{id:"render-file"},"Render file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, fileResult } from "fortjs";\nimport * as path from "path"\n\nexport class MyController extends Controller {\n   \n    @http.get("/image")\n    async default() {\n        // This method returns a file which tells browser to render the file like show an image\n       const pathLocation = path.join(__dirname, "../contents/JsStore_16_16.png");\n       return fileResult(pathLocation);\n    }\n}\n')),(0,l.kt)("h2",{id:"download-file"},"Download file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, downloadResult } from "fortjs";\nimport * as path from "path"\n\nexport class MyController extends Controller {\n   \n    @http.get("/download")\n    async default() {\n        // This method returns a file which tells browser to download the file\n       const pathLocation = path.join(__dirname, "../contents/JsStore_16_16.png");\n       return downloadResult(pathLocation);\n    }\n}\n')),(0,l.kt)("h2",{id:"render-a-view-file"},"Render a view file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, http, viewResult } from "fortjs";\n\nexport class MyController extends Controller {\n   \n    @http.get("/view")\n    async default() {\n        // This method renders a view file and then returns the HTML data.\n        // It uses the viewResult helper from FortJs.\n        const data = { \n            title: "Hello world" \n        };\n        return viewResult("views/default/index.html", data);\n    }\n}\n\n')),(0,l.kt)("p",null,"For more information on views, please refer to the ",(0,l.kt)("a",{parentName:"p",href:"/docs/advanced/view-engine"},"View Engine Documentation"),"."))}c.isMDXComponent=!0}}]);