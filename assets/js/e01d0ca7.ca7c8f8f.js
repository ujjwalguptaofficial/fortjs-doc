"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[4394],{3905:(e,t,r)=>{r.d(t,{Zo:()=>g,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},g=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,m=c["".concat(l,".").concat(d)]||c[d]||p[d]||s;return r?n.createElement(m,i(i({ref:t},g),{},{components:r})):n.createElement(m,i({ref:t},g))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<s;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6385:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const s={title:"Swagger Initialization",keywords:["swagger","automatic generate","integrate","fortjs","node"],description:"Swagger integration in fortjs"},i="Initiate Swagger",o={unversionedId:"swagger/initiate",id:"swagger/initiate",title:"Swagger Initialization",description:"Swagger integration in fortjs",source:"@site/docs/swagger/initiate.md",sourceDirName:"swagger",slug:"/swagger/initiate",permalink:"/docs/swagger/initiate",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/swagger/initiate.md",tags:[],version:"current",frontMatter:{title:"Swagger Initialization",keywords:["swagger","automatic generate","integrate","fortjs","node"],description:"Swagger integration in fortjs"},sidebar:"tutorialSidebar",previous:{title:"Swagger Integration with FortJs",permalink:"/docs/swagger/"},next:{title:"Swagger Model",permalink:"/docs/swagger/model"}},l={},u=[{value:"1. Install library",id:"1-install-library",level:2},{value:"2. Initiate",id:"2-initiate",level:2},{value:"Define structure",id:"define-structure",level:2},{value:"More resources",id:"more-resources",level:2}],g={toc:u},c="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"initiate-swagger"},"Initiate Swagger"),(0,a.kt)("p",null,"FortJs provides a separate library - ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ujjwalguptaofficial/fortjs-swagger"},"fortjs-swagger")," for Swagger integration. It provides automatic generation of Swagger documents by taking documents related information from you."),(0,a.kt)("h2",{id:"1-install-library"},"1. Install library"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install fortjs-swagger\n")),(0,a.kt)("h2",{id:"2-initiate"},"2. Initiate"),(0,a.kt)("p",null,"Initiate the Swagger after the FortJs has started."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import * as path from "path";\nimport { Fort } from "fortjs";\nimport { routes } from "@/routes";\nimport { swagger } from "fortjs-swagger";\n\nconst swaggerPath = path.join(__dirname, "../dist/swagger/");\n//highlight-start\nconst initSwagger = async () => {\n    await swagger.create({\n        appInfo: {\n            title: "Swagger Test",\n            description: "Swagger Test",\n            version: "1.0"\n        },\n        servers: [{\n            description: "local",\n            url: "http://localhost:4000"\n        }],\n        outputPath: swaggerPath,\n        securitySchemes: {\n            basicAuth: {\n                type: "http",\n                scheme: "basic"\n            }\n        }\n    });\n}\n//highlight-end\n\nexport const createApp = async () => {\n    Fort.folders = [\n        {\n            alias: "/",\n            path: path.join(__dirname, "../static")\n        },\n        {\n            alias: "/swagger",\n            path: swaggerPath\n        }\n    ];\n\n    Fort.routes = routes;\n    await initSwagger();\n    await Fort.create();\n    process.env.APP_URL = `http://localhost:${Fort.port}`;\n};\n\ncreateApp().then(() => {\n    Fort.logger.debug(`Your fort has been forged and is now ready for exploration at ${process.env.APP_URL}`);\n}).catch(err => {\n    console.error(err);\n});\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Will it generate docs now?")),(0,a.kt)("p",null,"No, This is only the setup to initiate Swagger. We need to tell FortJs what we are expecting exactly i.e., what will be the structure of HTTP request & structure of HTTP response, etc."),(0,a.kt)("h2",{id:"define-structure"},"Define structure"),(0,a.kt)("p",null,"Consider the below controller"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Controller, textResult, jsonResult, HTTP_STATUS_CODE, validate, shields, http, singleton } from 'fortjs';\nimport { UserService } from '@/services/user_service';\nimport { User } from '@/models/user';\nimport { AuthenticationShield } from '@/shields/authentication_shield';\n\n@shields(AuthenticationShield)\n@swagger.security('basicAuth')\nexport class UserController extends Controller {\n\n    service: UserService;\n\n    constructor(@singleton(UserService) userService: UserService) {\n        super();\n        this.service = userService;\n    }\n\n    @http.get(\"/\")\n    async getUsers() {\n        return jsonResult(this.service.getUsers());\n    }\n\n    @http.post(\"/\")\n    @validate.body(User)\n    async addUser() {\n        const user = this.body as User;\n        const newUser = this.service.addUser(user);\n        return jsonResult(newUser, HTTP_STATUS_CODE.Created);\n    }\n\n    @http.get(\"/{id}\")\n    async getUser() {\n        const userId = Number(this.param.id);\n        const user = this.service.getUser(userId);\n        if (user == null) {\n            return textResult(\"invalid user id\", HTTP_STATUS_CODE.NotFound);\n        }\n        return jsonResult(user);\n    }\n}\n")),(0,a.kt)("p",null,"The above controller does operations for a user. And every endpoint expects a different request and returns a different response. We need to tell these info to Swagger."),(0,a.kt)("p",null,'Let\'s document the method - "getUser".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { swagger } from 'fortjs-swagger';\n\n//highlight-start\n@swagger.summary('get a single user by id')\n@swagger.response(HTTP_STATUS_CODE.Ok, User)\n@swagger.response(HTTP_STATUS_CODE.NotFound, 'invalid user')\n@swagger.param('id', 1, 'user id')\n//highlight-end\n@http.get(\"/{id}\")\nasync getUser() {\n    const service = new UserService();\n    return jsonResult(service.getUsers());\n}\n")),(0,a.kt)("p",null,"Here we have used three different decorators -"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"summary")," - used to define the summary of the endpoint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"response"),' - used to define the response returned. In this example - we are telling Swagger that: for HTTP status "OK" the result will be an array of model User. You can define multiple responses in the same way i.e., by using the ',(0,a.kt)("inlineCode",{parentName:"li"},"response")," decorator multiple times."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"param")," - used to define route parameter")),(0,a.kt)("p",null,"In the similar way - we can define other methods."),(0,a.kt)("h2",{id:"more-resources"},"More resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Examples - ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ujjwalguptaofficial/fortjs-swagger/tree/master/examples"},"fortjs-swagger examples"))))}p.isMDXComponent=!0}}]);