"use strict";(self.webpackChunkmy=self.webpackChunkmy||[]).push([[8298],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),h=o,g=c["".concat(l,".").concat(h)]||c[h]||d[h]||a;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1,title:"Passport",keywords:["Fort.js","Passport.js","Authentication","JWT","Sessions","Express.js"],description:"Fort.js framework with Passport.js integration for flexible authentication, supporting JWT and sessions. Enhance security and user management in your web applications."},s="Passportjs integration",i={unversionedId:"authentication/passport/passport",id:"authentication/passport/passport",title:"Passport",description:"Fort.js framework with Passport.js integration for flexible authentication, supporting JWT and sessions. Enhance security and user management in your web applications.",source:"@site/docs/authentication/passport/passport.md",sourceDirName:"authentication/passport",slug:"/authentication/passport/",permalink:"/docs/authentication/passport/",draft:!1,editUrl:"https://github.com/ujjwalguptaofficial/fortjs-doc/tree/main/docs/authentication/passport/passport.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Passport",keywords:["Fort.js","Passport.js","Authentication","JWT","Sessions","Express.js"],description:"Fort.js framework with Passport.js integration for flexible authentication, supporting JWT and sessions. Enhance security and user management in your web applications."},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/docs/authentication/"},next:{title:"Passport JWT Authentication",permalink:"/docs/authentication/passport/passport-jwt"}},l={},p=[{value:"Requirements",id:"requirements",level:2},{value:"1. Registration and Login Routes",id:"1-registration-and-login-routes",level:3},{value:"1.1 Registration Page",id:"11-registration-page",level:4},{value:"1.2 Login Page",id:"12-login-page",level:4},{value:"2. User Login",id:"2-user-login",level:3},{value:"2.1 Login Post Route",id:"21-login-post-route",level:4},{value:"3. Protected Routes",id:"3-protected-routes",level:3},{value:"3.1 Protected Route",id:"31-protected-route",level:4},{value:"Installation",id:"installation",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Initiate",id:"initiate",level:3},{value:"Create Controller",id:"create-controller",level:3},{value:"Registration and Login routes",id:"registration-and-login-routes",level:3},{value:"User Login",id:"user-login",level:3},{value:"Protected route",id:"protected-route",level:3},{value:"Access user",id:"access-user",level:4}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"passportjs-integration"},"Passportjs integration"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/jaredhanson/passport"},"Passport")," stands out as the most popular authentication library for Node.js, widely recognized within the community and successfully deployed in numerous production applications. Integrating this library with a FortJs application becomes seamless through the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ujjwalguptaofficial/fortjs-passport"},"fortjs-passport")," module."),(0,o.kt)("p",null,"Passport boasts a diverse ecosystem of ",(0,o.kt)("a",{parentName:"p",href:"http://www.passportjs.org/"},"strategies")," that cover a spectrum of authentication mechanisms. Despite the conceptual simplicity, the array of Passport strategies is extensive, offering a wide range of options. Passport streamlines these diverse steps into a standardized pattern."),(0,o.kt)("p",null,"This guide walks you through the implementation of a comprehensive end-to-end authentication solution tailored for a RESTful API server. The concepts outlined here serve as a foundation for incorporating any Passport strategy, allowing you to customize your authentication scheme. Follow the steps in this guide to construct a fully functional example."),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,"In every web application, it's essential to include the following common logic:"),(0,o.kt)("h3",{id:"1-registration-and-login-routes"},"1. Registration and Login Routes"),(0,o.kt)("h4",{id:"11-registration-page"},"1.1 Registration Page"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Route:")," ",(0,o.kt)("inlineCode",{parentName:"li"},"/register")," (GET)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Description:")," This route renders an HTML page allowing users to register for the application.")),(0,o.kt)("h4",{id:"12-login-page"},"1.2 Login Page"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Route:")," ",(0,o.kt)("inlineCode",{parentName:"li"},"/login")," (GET)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Description:")," Accessing this route will display an HTML page for user login.")),(0,o.kt)("h3",{id:"2-user-login"},"2. User Login"),(0,o.kt)("h4",{id:"21-login-post-route"},"2.1 Login Post Route"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Route:")," ",(0,o.kt)("inlineCode",{parentName:"li"},"/login")," (POST)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Description:")," Users can submit their credentials through a POST request to this route for authentication.")),(0,o.kt)("h3",{id:"3-protected-routes"},"3. Protected Routes"),(0,o.kt)("h4",{id:"31-protected-route"},"3.1 Protected Route"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Route:")," ",(0,o.kt)("inlineCode",{parentName:"li"},"/protected")," (GET)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Description:")," Access to this route is restricted to authenticated users only.")),(0,o.kt)("p",null,"By implementing these routes, users can seamlessly register, log in, and access protected areas within the application."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Our first step involves installing the necessary packages. Passport offers a strategy named ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jaredhanson/passport-local"},"passport-local"),", specifically designed for username/password authentication \u2014 a fitting choice for this phase of our use case."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i fortjs-passport passport-local\n")),(0,o.kt)("p",null,"You have the option to install typings for passport-local, although it's not mandatory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @types/passport-local -D\n")),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("h3",{id:"initiate"},"Initiate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/index",title:"src/index"},'\nimport * as path from "path";\nimport { Fort } from "fortjs";\nimport { routes } from "@/routes";\nimport { PassportAuth } from "fortjs-passport";\nimport { Strategy } from \'passport-local\';\nimport { db } from "./services/db";\n\nexport const createApp = async () => {\n    Fort.routes = routes;\n\n    //highlight-start\n    // Initiate Passport authentication\n    PassportAuth.init();\n\n    // Register the local strategy for user login\n    PassportAuth.passport.use(\'local\', new Strategy({\n        usernameField: \'email\',\n        passwordField: \'password\'\n    },\n        function (email, password, done) {\n            const user = db.users.find(user => user.emailId === email);\n            if (!user) { return done(null, false); }\n            if (user.password !== password) { return done(null, false); }\n            return done(null, user);\n        }\n    ));\n    //highlight-end\n\n    // Create the Fort application\n    await Fort.create();\n\n    // Set the application URL\n    process.env.APP_URL = `http://localhost:${Fort.port}`;\n};\n\nif (process.env.NODE_ENV !== "test") {\n    createApp().then(() => {\n        Fort.logger.debug(`Your fort is located at address - ${process.env.APP_URL}`);\n    }).catch(err => {\n        console.error(err);\n    });\n}\n')),(0,o.kt)("p",null,"In the provided code snippet, the Passport module is initialized using ",(0,o.kt)("inlineCode",{parentName:"p"},"PassportAuth.init()"),", and a local strategy is registered for user login authentication. The configuration includes specifying the username and password fields. The ",(0,o.kt)("inlineCode",{parentName:"p"},"createApp")," function is responsible for setting up the Fort application, and the application URL is logged once the setup is complete."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},"You can get the ",(0,o.kt)("inlineCode",{parentName:"li"},"passport")," instance by ",(0,o.kt)("inlineCode",{parentName:"li"},"PassportAuth.passport")," and use it for almost everything as you would do in express application."))),(0,o.kt)("h3",{id:"create-controller"},"Create Controller"),(0,o.kt)("p",null,"Let's Create a controller named ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthController"),' which is mapped with route "/auth". This route is accessible to everyone without any authentication.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/controllers/auth_controller",title:"src/controllers/auth_controller"},'import { Controller } from "fortjs"\nexport class AuthController extends Controller {\n\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/routes",title:"src/routes"},'import { AuthController } from "@/controllers/auth_controller";\n\n\nexport const routes = [{\n    path: "/auth",\n    controller: AuthController\n}]\n')),(0,o.kt)("h3",{id:"registration-and-login-routes"},"Registration and Login routes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { http, Controller, viewResult } from "fortjs"\nexport class AuthController extends Controller {\n\n    // Route for rendering the login page\n    @http.get("/login")\n    async getLoginPage() {\n        const result = viewResult("loginPage");\n        return result;\n    } \n\n    // Route for rendering the registration page\n    @http.get("/register")\n    async getRegisterPage() {\n        const result = viewResult("registerPage");\n        return result;\n    } \n}\n')),(0,o.kt)("p",null,"In the AuthController, two routes, ",(0,o.kt)("inlineCode",{parentName:"p"},"/login")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/register"),", are defined with the ",(0,o.kt)("strong",{parentName:"p"},"GET")," HTTP method. The ",(0,o.kt)("inlineCode",{parentName:"p"},"getLoginPage")," method renders the login page, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"getRegisterPage")," method renders the registration page using the ",(0,o.kt)("inlineCode",{parentName:"p"},"viewResult")," function."),(0,o.kt)("p",null,"For information on how ",(0,o.kt)("inlineCode",{parentName:"p"},"viewResult")," works, refer to ",(0,o.kt)("a",{parentName:"p",href:"/docs/view"},"viewResult Doc"),"."),(0,o.kt)("h3",{id:"user-login"},"User Login"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { http, Controller, viewResult } from "fortjs"\nimport { auth } from "fortjs-passport";\n\nexport class AuthController extends Controller {\n\n    //highlight-start\n    @http.post("/login")\n    // apply local guard which will handle the login and pass user in the method\n    @guards(auth.guard(\'local\'))\n    async doLogin() {\n        const { user } = this.request as any;\n        return textResult(`Welcome ${user.name}`);\n    }\n    //highlight-end\n\n    // Route for rendering the login page\n    @http.get("/login")\n    async getLoginPage() {\n        const result = viewResult("loginPage");\n        return result;\n    } \n\n    // Route for rendering the registration page\n    @http.get("/register")\n    async getRegisterPage() {\n        const result = viewResult("registerPage");\n        return result;\n    } \n}\n')),(0,o.kt)("p",null,"In the provided code snippet, a ",(0,o.kt)("strong",{parentName:"p"},"POST")," route for user login has been implemented using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@http.post")," decorator. The ",(0,o.kt)("inlineCode",{parentName:"p"},"@guards(auth.guard('local'))")," decorator is applied to handle the login process using the local strategy. The ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," object is then accessed from the ",(0,o.kt)("inlineCode",{parentName:"p"},"request"),", and a welcome message is returned in the response. "),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"auth")," property from ",(0,o.kt)("inlineCode",{parentName:"p"},"fortjs-passport")," can be utilized to execute the Passport strategy by providing the registered strategy name. It exposes two key functions: ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.guard")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.shield"),". These functions streamline the usage of Passport's authentication features within the Fort.js application.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"By default, ",(0,o.kt)("inlineCode",{parentName:"p"},"fortjs-passport")," initializes sessions for you to enable persistent authentication. However, you have the option to turn off session support by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"Fort.shouldParseCookie")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". This action disables cookie parsing, consequently turning off the session functionality.")),(0,o.kt)("h3",{id:"protected-route"},"Protected route"),(0,o.kt)("p",null,"Let's create a controller named - ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectedController")," with route ",(0,o.kt)("inlineCode",{parentName:"p"},"/protected"),". It will have some endpoints and will be accessible to only authenticated user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/controller/protected_controller",title:"src/controller/protected_controller"},'import { Controller, shields } from "fortjs";\nimport { auth } from \'fortjs-passport\';\n\n@shields(auth.shield("isAuthenticated"))\nexport class ProtectedController extends Controller {\n\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=src/routes",title:"src/routes"},'import { AuthController } from "@/controllers/auth_controller";\nimport { ProtectedController } from "@/controllers/protected_controller";\n\nexport const routes = [\n    {\n        path: "/auth",\n        controller: AuthController\n    },\n    //highlight-start\n    {\n        path: "/protected",\n        controller: ProtectedController\n    }\n    //highlight-end\n]\n')),(0,o.kt)("p",null,"In the provided code snippet, a ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectedController")," is created with the route ",(0,o.kt)("inlineCode",{parentName:"p"},"/protected"),". The controller is protected by the ",(0,o.kt)("strong",{parentName:"p"},"isAuthenticated")," shield, which is applied using ",(0,o.kt)("inlineCode",{parentName:"p"},'auth.shield("isAuthenticated")'),". This shield ensures that only authenticated users have access to the endpoints within the ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectedController"),"."),(0,o.kt)("h4",{id:"access-user"},"Access user"),(0,o.kt)("p",null,"Let's create a controller method named - ",(0,o.kt)("inlineCode",{parentName:"p"},"getUser")," which is mapped with route ",(0,o.kt)("inlineCode",{parentName:"p"},"/user")," and http method ",(0,o.kt)("inlineCode",{parentName:"p"},"GET"),". It will return the ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," object as ",(0,o.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { Controller, shields, http, jsonResult } from "fortjs";\nimport { auth } from \'fortjs-passport\';\n\n@shields(auth.shield("isAuthenticated"))\nexport class ProtectedController extends Controller {\n    \n    //highlight-start\n    @http.get("/user")\n    getUser(){\n        // isAuthenticated shield pass `user` via data.\n        const { user } = this.data;\n\n        // const user = this.request[\'user\'] - this is how you would get user in expressjs\n\n        return jsonResult(user);\n    }\n    //highlight-end\n}\n')),(0,o.kt)("p",null,"For a complete example, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ujjwalguptaofficial/fortjs-passport/tree/main/examples/session"},"Passportjs session Auth Example"),"."),(0,o.kt)("p",null,"\ud83d\udc49 In the next chapter, we will learn how to implement ",(0,o.kt)("a",{parentName:"p",href:"/docs/authentication/passport/passport-jwt"},"JWT Authentication using passportjs"),"."))}d.isMDXComponent=!0}}]);