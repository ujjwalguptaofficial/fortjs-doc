(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{198:function(e,t,r){"use strict";r.r(t);var o={components:{Layout:r(170).a}},n=r(12),component=Object(n.a)(o,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("Layout",{attrs:{title:"Expect Query",description:"This page tells about decorator ExpectQuery & how to use this.",keywords:"query, secure query, validation, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/decorator/expect-query.md"}},[r("p",[e._v("ExpectQuery is a decorator which helps you to validate query string data. It provides following features -")]),e._v(" "),r("ul",[r("li",[e._v("Check data type of incoming query string data against expected query string & automatically convert if possible.")]),e._v(" "),r("li",[e._v("Removes unnecessary data from incoming query string. This helps you to store data in nosql database without retrieving particular property and thus saving lots of code.")])]),e._v(" "),r("p",[r("br")]),e._v(" "),r("h2",{attrs:{id:"checkdatatype"}},[e._v("Check data type")]),e._v(" "),r("p",[r("br"),e._v("\nConsider a http request which sends value id in query string -")]),e._v(" "),r("pre",[r("code",[e._v("http://abc.com/product?id=1\n")])]),e._v(" "),r("p",[e._v("Here Id being sent is 1 which will be always string (query strings value are always string).In this case you will write codes to convert "),r("code",[e._v("id")])]),e._v(" "),r("p",[e._v("But when using "),r("code",[e._v("ExpectQuery")]),e._v(" it will automatically check the datatype & convert to number.")]),e._v(" "),r("p",[e._v("Let's see how to configure this using "),r("code",[e._v("ExpectQuery")])]),e._v(" "),r("pre",[r("code",[e._v('export class ProductController{\n\n    @Route("/")\n    @Worker("get")\n    @ExpectQuery({ id: 0})\n    saveProduct(){\n       const id =  this.query.id;\n    }\n}\n')])]),e._v(" "),r("p",[e._v("You can also provide a class as parameter. Make sure that class properties are initialized.")]),e._v(" "),r("p",[e._v("e.g - ")]),e._v(" "),r("pre",[r("code",[e._v('export class Product {\n  id = 0;\n}\n\nexport class ProductController{\n\n    @Route("/")\n    @Worker("get")\n    @ExpectQuery(Product)\n    saveProduct(){\n       const id =  this.query.id;\n    }\n}\n')])]),e._v(" "),r("p",[r("br")]),e._v(" "),r("h2",{attrs:{id:"removesunnecessarydatafromincomingbody"}},[e._v("Removes unnecessary data from incoming body")]),e._v(" "),r("p",[r("br"),e._v("\nConsider a http request which sends following data in request as query string")]),e._v(" "),r("pre",[r("code",[e._v('{\n    name:"ujjwal",\n    gender:"male",\n    extra:"extra_value" // some extra value which is not required\n}\n')])]),e._v(" "),r("p",[e._v('so url will be  - "http://abc.com/user?name=ujjwal&gender=male&extra=extra_value"')]),e._v(" "),r("p",[e._v("Let's see how to use ExpectQuery to only retrieve value that we want, so that property extra will be removed.")]),e._v(" "),r("pre",[r("code",[e._v('export class UserController{\n\n    @Route("/")\n    @Worker("get")\n    @ExpectQuery({name:"", gender: ""})\n    saveUser(){\n       const user =  this.query;\n    }\n}\n')])])])}),[],!1,null,null,null);t.default=component.exports}}]);