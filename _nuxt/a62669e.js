(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{188:function(e,t,n){"use strict";n.r(t);var r={components:{Layout:n(170).a}},o=n(12),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("Layout",{attrs:{title:"Unit Test",description:"Setting up unit test in fortjs",keywords:"test, unit, e2e, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/test/unit-test.md"}},[n("p",[e._v('As the codes written in fortjs are simple & clean, we want similar approach for test cases. Let\'s see one example for unit testing "UserController"- ')]),e._v(" "),n("p",[e._v("Consider UserController implments Rest Api & codes are - ")]),e._v(" "),n("pre",[n("code",[e._v('import { Controller, textResult, DefaultWorker, jsonResult, Worker, Route, HTTP_STATUS_CODE, HTTP_METHOD, Guards, Singleton } from \'fortjs\';\nimport { UserService } from \'../services/user_service\';\nimport { ModelUserGuard } from \'../guards/model_user_guard\';\nimport { User } from \'../models/user\';\n\nexport class UserController extends Controller {\n\n    service: UserService;\n    constructor(@Singleton(UserService) service: UserService) {\n        super();\n        this.service = service;\n    }\n\n    @DefaultWorker()\n    async getUsers() {\n        return jsonResult(this.service.getUsers());\n    }\n\n    @Worker(HTTP_METHOD.Post)\n    @Route("/")\n    @Guards(ModelUserGuard)\n    async addUser() {\n        const user = this.data.user;\n        const newUser = this.service.addUser(user);\n        return jsonResult(newUser, HTTP_STATUS_CODE.Created);\n    }\n\n    @Worker(HTTP_METHOD.Put)\n    @Route("/")\n    async updateUser() {\n        const user = new User().init(this.body);\n        const userUpdated = this.service.updateUser(user);\n        if (userUpdated === true) {\n            return textResult("user updated");\n        }\n        else {\n            return textResult("invalid user");\n        }\n\n    }\n\n    @Worker(HTTP_METHOD.Get)\n    @Route("/{id}")\n    async getUser() {\n\n        const userId = Number(this.param.id);\n        const user = new UserService().getUser(userId);\n        if (user == null) {\n            return textResult("invalid user id", HTTP_STATUS_CODE.NotFound);\n        }\n        return jsonResult(user);\n\n    }\n\n}\n')])]),e._v(" "),n("h2",{attrs:{id:"testcode"}},[e._v("Test code -")]),e._v(" "),n("pre",[n("code",[e._v("describe('UserController', () => {\n    let controller;\n\n    beforeAll(async () => {\n        await createApp();\n        // UserController has dependency of UserService, which is injected by fortjs at run time. \n        // Here UserService is a fake service in memory\n        controller = new UserController(new UserService());\n    });\n\n    it('getUsers', async () => {\n        controller.initialize();\n        const expectedResult = jsonResult(controller.service.getUsers());\n        const result = await controller.getUsers();\n        expect(result).toEqual(expectedResult);\n    });\n\n    it('addUser', async () => {\n        const newUser = {\n            name: 'ujjwal gupta',\n            emailId: 'ujjwal@m.com',\n            gender: 'male',\n            password: 'asdfvg',\n            address: 'Bangalore India'\n        };\n        controller.initialize({\n            data: {\n                user: newUser\n            }\n        });\n        const expectedResult = jsonResult(newUser, 201);\n        const result = await controller.addUser();\n        expect(result).toEqual(expectedResult);\n        expect(result.responseData).toEqual(newUser);\n    });\n\n    it('getUser', async () => {\n        controller.initialize({\n            param: {\n                id: '2'\n            }\n        });\n        const expectedResult = jsonResult(controller.service.getUser(2));\n        const result = await controller.getUsers();\n        expect(result).toEqual(expectedResult);\n    });\n\n    it('updateUser', async () => {\n        const userData = {\n            id: 2,\n            name: 'ujjwal gupta',\n            emailId: 'ujjwal@m.com',\n            gender: 'male',\n            password: 'asdfvg',\n            address: 'Bangalore India'\n        };\n\n        // update user for existing data\n        controller.initialize({\n            body: {\n                user: userData\n            }\n        });\n        let expectedResult = await textResult(\"user updated\");\n        let result = await controller.updateUser();\n        expect(result).toEqual(expectedResult);\n\n        // update user for not existing data\n        userData.id = 5;\n        controller.initialize({\n            data: {\n                user: userData\n            }\n        });\n        expectedResult = textResult(\"invalid user\");\n        result = await controller.updateUser();\n        expect(result).toEqual(expectedResult);\n    });\n\n    afterAll(() => {\n        return Fort.destroy();\n    });\n});\n")])]),e._v(" "),n("p",[e._v("In the above code -")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("beforeAll")]),e._v(' - We are configuring everything that we need bofore test starts in "beforeAll" hook of jest i.e - creating the UserController object and starting our app. The hook can be different in another framework.')])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("getUsers")]),e._v(" -  Here we have written code for testing getUsers. \"getUsers\" is a method which returns all the user presents. As you can see, the first line of the code is 'controller.initialize' - this is very important to call before any test case start. The 'initialize' method is present in every component i.e - controller, guard, wall & shield. This is used to initialize the controller with some value i.e setting body object, setting query string etc, basically to set the component props.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("addUser")]),e._v(" - \"addUser\" method takes user data from body & add a user. We are using 'controller.initialize' to supply the user information in body. But in code, we are actually supplying user information in "),n("code",[e._v("data")]),e._v(" but not "),n("code",[e._v("body")]),e._v(' - this is because method "addUser" uses a Guard '),n("code",[e._v("ModelUserGuard")]),e._v(" which sends user info in "),n("code",[e._v("data")]),e._v(' & the worker "addUser" uses data property of controller.')])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("updateUser")]),e._v(" -  \"updateUser\" method takes user data from body & update user if exist otherwise returns 'invalid user'. The test code initialise the controller using 'controller.initialize' & supply the user information in body. Here we are not using any guard (for explainining how to pass body i have removed guard from this method).")])])]),e._v(" "),n("p",[e._v("Hope this is clear & understandable. For help - please reach to our gitter channel.")])])}),[],!1,null,null,null);t.default=component.exports}}]);