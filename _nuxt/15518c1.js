(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{217:function(t,e,o){"use strict";o.r(e);var n={components:{Layout:o(170).a}},r=o(12),component=Object(r.a)(n,(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("Layout",{attrs:{title:"Format Response",description:"Formatting response in nodejs using fortjs",keywords:"format response, multiple response, mime type, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/advanced/format-response.md"}},[o("p",[t._v("You can customize the format of your response and based on "),o("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation"}},[t._v("content negotiation")]),t._v(" fortjs select the appropriate response. If an appropriate response is not found then a response with status code - 406 is returned.")]),t._v(" "),o("p",[t._v("A result of type - "),o("a",{attrs:{href:"/tutorial/type/http-format-result"}},[t._v("HttpFormatResult")]),t._v(" is used to return the response with different format.")]),t._v(" "),o("p",[t._v("Let's see an example -")]),t._v(" "),o("pre",[o("code",[t._v('import { Controller, DefaultWorker, HttpFormatResult, HTTP_STATUS_CODE, MIME_TYPE} from "fortjs";\n\nexport class RandomController extends Controller {\n\n    @DefaultWorker()\n    async format() {\n        const result = {\n            statusCode: HTTP_STATUS_CODE.Ok,\n            responseFormat: {\n                [MIME_TYPE.Json]: () => {\n                    return { message: "hello world" }\n                },\n                [MIME_TYPE.Html]: () => {\n                    return "<p>hello world</p>"\n                },\n                [MIME_TYPE.Text]: () => {\n                    return "hello world"\n                }\n            }\n        } as HttpFormatResult;\n        return result;\n    }\n}\n')])]),t._v(" "),o("p",[t._v("In the above code - we are returning three format (html, json, text).")])])}),[],!1,null,null,null);e.default=component.exports}}]);