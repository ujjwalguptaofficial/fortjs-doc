(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{214:function(e,t,r){"use strict";r.r(t);var o={components:{Layout:r(170).a}},l=r(12),component=Object(l.a)(o,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("Layout",{attrs:{title:"Worker",description:"Description about worker in fortjs",keywords:"worker, route, controller method, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/worker.md"}},[r("p",[e._v("Worker is a method which does particular task and return the final result. ")]),e._v(" "),r("p",[e._v("A worker method -")]),e._v(" "),r("ul",[r("li",[e._v("must be async or return a promise (since async is built on top of promises).")]),e._v(" "),r("li",[e._v("The result returned by worker method must be promise of type "),r("a",{attrs:{href:"/tutorial/type/http-result"}},[e._v("HttpResult")]),e._v(" or "),r("a",{attrs:{href:"/tutorial/http-format-result"}},[e._v("HttpFormatResult")]),e._v(".")])]),e._v(" "),r("p",[r("br"),e._v("\nSince a worker is part of controller, it have the access to all the things which a controller has i.e - ")]),e._v(" "),r("ul",[r("li",[e._v("Request - "),r("code",[e._v("this.request")])]),e._v(" "),r("li",[e._v("Response - "),r("code",[e._v("this.response")])]),e._v(" "),r("li",[e._v("Cookie - "),r("code",[e._v("this.cookies")])]),e._v(" "),r("li",[e._v("Session - "),r("code",[e._v("this.session")])]),e._v(" "),r("li",[e._v("Query string data - "),r("code",[e._v("this.query")])]),e._v(" "),r("li",[e._v("Post data - "),r("code",[e._v("this.post")])]),e._v(" "),r("li",[e._v("Route parameter -  "),r("code",[e._v("this.param")])]),e._v(" "),r("li",[e._v("Data from other components -  "),r("code",[e._v("this.data")])])]),e._v(" "),r("p",[r("br")]),e._v(" "),r("h1",{attrs:{id:"creatingworker"}},[e._v("Creating worker")]),e._v(" "),r("p",[r("br"),e._v("\nWorker is created by using decorator - "),r("code",[e._v("Worker")]),e._v(" or "),r("code",[e._v("DefaultWorker")]),e._v(".")]),e._v(" "),r("h2",{attrs:{id:"example"}},[e._v("Example")]),e._v(" "),r("pre",[r("code",[e._v('import { Controller, Worker, DefaultWorker, textResult } from "fortjs";\n\nexport class UserController extends Controller {\n\n    @DefaultWorker()\n    async default () {\n       return textResult("This is default worker for section user");\n    }\n\n    @Worker()\n    async getUser() {\n        return textResult("This is a worker for section user");\n    }\n\n}\n')])]),e._v(" "),r("p",[e._v("Lets consider that controller - 'UserController' is associated with path '/user' and our domain is abc.com.")]),e._v(" "),r("p",[e._v("So what these decorators - "),r("code",[e._v("Worker")]),e._v(" and "),r("code",[e._v("DefaultWorker")]),e._v(" do ?")]),e._v(" "),r("ul",[r("li",[r("p",[r("strong",[e._v("Worker")]),e._v(" - method having decorator Worker is added to route with all http methods (GET,POST etc).And the route is '/${method_name}'. For our example - route will be : '/getuser'.")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("DefaultWorker")]),e._v(" - method having decorator DefaultWorker is added to route with one http method GET. And the route is '/'.")])])]),e._v(" "),r("p",[r("br"),e._v("\nSo in the above example, when url will be - ")]),e._v(" "),r("ul",[r("li",[e._v("abc.com/user - method default will be called.")]),e._v(" "),r("li",[e._v("abc.com/user/:getuser - method getuser will be called.")])]),e._v(" "),r("p",[r("br")]),e._v(" "),r("h2",{attrs:{id:"howtodeclareamethodasdefaultworkerwithoutusingdecoratordefaultworker"}},[e._v("How to declare a method as default worker without using decorator - defaultWorker")]),e._v(" "),r("p",[r("br"),e._v("\nA method can be declared as default worker by using decorators - "),r("code",[e._v("Worker")]),e._v(" & "),r("code",[e._v("Route")]),e._v(".")]),e._v(" "),r("p",[e._v("Lets update the example -")]),e._v(" "),r("pre",[r("code",[e._v('import { Controller, Worker, textResult, HTTP_METHOD, Route } from "fortjs";\n\nexport class UserController extends Controller {\n\n   // @defaultWorker()\n    @Worker(HTTP_METHOD.Get)\n    @Route("/")\n    async default () {\n       return textResult("This is default worker for section user");\n    }\n}\n')])])])}),[],!1,null,null,null);t.default=component.exports}}]);