(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{215:function(e,o,r){"use strict";r.r(o);var t={components:{Layout:r(170).a}},n=r(12),component=Object(n.a)(t,(function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("Layout",{attrs:{title:"Custom Error Handler",description:"How to customize error in nodejs using fortjs",keywords:"customize error, handle error, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/advanced/custom-error-handler.md"}},[r("p",[e._v("In order to customize the error response , you need to create a class which extend class ErrorHandler and override the available methods.")]),e._v(" "),r("p",[e._v("e.g - Let's say you want to customize the error response for status code - 404.")]),e._v(" "),r("pre",[r("code",[e._v('import { ErrorHandler } from "fortjs";\n\nexport class CustomErrorHandler extends ErrorHandler {\n    async onNotFound(url){\n       return  htmlResult(`<h1>The resource ${url} does not exist.</h1>`);\n    }\n}\n')])]),e._v(" "),r("p",[e._v("So basically it returns a customized http response similar to worker.")]),e._v(" "),r("p",[e._v("Now you have created the class, you need to inform fortjs about this.")]),e._v(" "),r("pre",[r("code",[e._v('import { Fort } from "fortjs";\nimport { UserController } from "./controllers";\nimport { CustomErrorHandler } from "./extra/custom_error_handler";\n\n\n//add routes\nFort.routes = [{\n    controller: UserController,\n    path: "/user"\n}];\n\nFort.errorHandler = CustomErrorHandler;    \n\nFort.create();\n')])]),e._v(" "),r("p",[e._v("The methods available for override are - ")]),e._v(" "),r("ul",[r("li",[e._v("onServerError(ex: IException): Promise<HttpResult | HttpFormatResult>")]),e._v(" "),r("li",[e._v("onBadRequest(ex: IException): Promise<HttpResult | HttpFormatResult>")]),e._v(" "),r("li",[e._v("onForbiddenRequest(): Promise<HttpResult | HttpFormatResult>")]),e._v(" "),r("li",[e._v("onNotAcceptableRequest(): Promise<HttpResult | HttpFormatResult>")]),e._v(" "),r("li",[e._v("onMethodNotAllowed(): Promise<HttpResult | HttpFormatResult>")]),e._v(" "),r("li",[e._v("onNotFound(url: string): Promise<HttpResult | HttpFormatResult>")])]),e._v(" "),r("p",[r("br"),e._v("\nYou can see some methods also have parameters. So its upto you how you want to use those params.")]),e._v(" "),r("p",[e._v("e.g - for onServerError (Status code - 500), you should not show the exception information to users but you should definitely log those errors.")]),e._v(" "),r("p",[r("strong",[e._v("Note:-")]),e._v(" It is highly recommended to create a custom error handler and atleast override the onServerError method and log the exception, otherwise you won't have any information regarding the exception occured.")])])}),[],!1,null,null,null);o.default=component.exports}}]);