(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{196:function(e,r,t){"use strict";t.r(r);var n={components:{Layout:t(170).a}},o=t(12),component=Object(o.a)(n,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("Layout",{attrs:{title:"Swagger Initialization",description:"Swagger integration in fortjs",keywords:"swagger, automatic generate, integrate, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/swagger/initiate.md"}},[t("p",[e._v("FortJs provides a seperate library - "),t("a",{attrs:{href:"https://github.com/ujjwalguptaofficial/fortjs-swagger"}},[e._v("fortjs-swagger")]),e._v(" for swagger integration. It provides automatic generation of swagger documents by taking documents related information from you.")]),e._v(" "),t("h2",{attrs:{id:"1installlibrary"}},[e._v("1. Install library")]),e._v(" "),t("p",[t("br"),e._v(" "),t("code",[e._v("npm install fortjs-swagger")])]),e._v(" "),t("p",[t("br")]),e._v(" "),t("h2",{attrs:{id:"2initiate"}},[e._v("2. Initiate")]),e._v(" "),t("p",[t("br"),e._v("\ninitiate the swagger after the fortjs has started.")]),e._v(" "),t("p",[e._v("e.g -")]),e._v(" "),t("pre",[t("code",[e._v('import * as Path from "path";\nimport { Fort } from "fortjs";\nimport { Swagger } from "fortjs-swagger";\nimport { routes } from "./routes";\n\n\nFort.routes = routes;\n\n// allow swagger path to access using url with alias swagger\nFort.folders = [{\n    alias: "swagger",\n    path: Path.join(__dirname, "../swagger/")\n}];\n\nFort.create().then(() => {    \n    // initiating swagger \n    Swagger.create({\n        appInfo: {\n            title: "Swagger Test",\n            description: "Swagger Test",\n            version: "1.0"\n        },\n        servers: [{\n            description: "local",\n            url: "http://localhost:4000"\n        }],\n        // create swagger files at this path\n        outputPath: swaggerPath,\n        securitySchemes: {\n            basicAuth: {\n                type: "http",\n                scheme: "basic"\n            }\n        }\n    });\n})\n')])]),e._v(" "),t("p",[e._v("Will it generate docs now ?")]),e._v(" "),t("p",[e._v("No, This is only setup to initiate swagger. We need to tell fortjs what we are expecting exactly i.e - what will be the structure of http request & structure of http response etc.")]),e._v(" "),t("p",[e._v("Consider the below controller")]),e._v(" "),t("pre",[t("code",[e._v('import { Controller, textResult, DefaultWorker, jsonResult, Worker, Route, HTTP_STATUS_CODE, HTTP_METHOD, Guards, Shields } from \'fortjs\';\nimport { UserService } from \'../services/user_service\';\nimport { ModelUserGuard } from \'../guards/model_user_guard\';\nimport { User } from \'../models/user\';\nimport { Response, Body, Param, Summary, Description, Security } from \'fortjs-swagger\';\n\n\nexport class UserController extends Controller {\n\n    @DefaultWorker()\n    async getUsers() {\n        const service = new UserService();\n        return jsonResult(service.getUsers());\n    }\n\n    @Worker([HTTP_METHOD.Post])\n    @Route("/")\n    @Guards([ModelUserGuard])\n    async addUser() {\n        const user = this.data.user;\n        const service = new UserService();\n        const newUser = service.addUser(user);\n        return jsonResult(newUser, HTTP_STATUS_CODE.Created);\n    }\n\n    @Worker([HTTP_METHOD.Put])\n    @Guards([ModelUserGuard])\n    @Route("/")\n    async updateUser() {\n\n        const user: User = this.data.user;\n        const userUpdated = new UserService().updateUser(user);\n        if (userUpdated === true) {\n            return textResult("user updated");\n        }\n        else {\n            return textResult("invalid user");\n        }\n\n    }\n\n    @Worker([HTTP_METHOD.Get])\n    @Route("/{id}")\n    async getUser() {\n\n        const userId = Number(this.param.id);\n        const user = new UserService().getUser(userId);\n        if (user == null) {\n            return textResult("invalid id");\n        }\n        return jsonResult(user);\n\n    }\n\n    @Worker([HTTP_METHOD.Delete])\n    @Route("/{id}")\n    async removeUser() {\n\n        const userId = Number(this.param.id);\n        const service = new UserService();\n        const user = service.getUser(userId);\n        if (user != null) {\n            service.removeUser(userId);\n            return textResult("user deleted");\n        }\n        else {\n            return textResult("invalid user");\n        }\n     }\n }\n')])]),e._v(" "),t("p",[e._v("The above controller does operation for a user. And every end point exepects different request and return different response. We need to tell these info to swagger. ")]),e._v(" "),t("p",[e._v('Let\'s document the  worker - "getUsers". ')]),e._v(" "),t("pre",[t("code",[e._v("import { Response, Summary, Description} from 'fortjs-swagger';\n\n@Summary('get all users')\n@Description('return all saved users') \n@Response(HTTP_STATUS_CODE.Ok, [User])\n@DefaultWorker()\nasync getUsers() {\n    const service = new UserService();\n    return jsonResult(service.getUsers());\n}\n")])]),e._v(" "),t("p",[e._v("Here we have used three different decorators -")]),e._v(" "),t("ul",[t("li",[e._v("Summary - used to define the summary of the end point")]),e._v(" "),t("li",[e._v("Description - used to describe the end point in details. This is not necessary most of the time.")]),e._v(" "),t("li",[e._v('Response -  used to define the response returned. In this example - we are telling swagger that : for http status "OK" the result will be array of model User. You can define multiple response in the same way i.e by using response decorator multiple time.')])]),e._v(" "),t("p",[t("br"),e._v("In the similar way - we can define other workers.")]),e._v(" "),t("h1",{attrs:{id:"moreresources"}},[e._v("* More resources -")]),e._v(" "),t("p",[t("br")]),e._v(" "),t("ul",[t("li",[e._v("Examples - https://github.com/ujjwalguptaofficial/fortjs-swagger/tree/master/examples")])])])}),[],!1,null,null,null);r.default=component.exports}}]);