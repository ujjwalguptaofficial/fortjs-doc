(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{220:function(e,n,o){"use strict";o.r(n);var r={components:{Layout:o(170).a}},t=o(12),component=Object(t.a)(r,(function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("Layout",{attrs:{title:"Session Provider",description:"Customize session provider in fortjs",keywords:"session provider, create session provider, options, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/advanced/session-provider.md"}},[o("p",[e._v("By default fortjs provides a memory session provider which stores all your data in memory & data is lost when nodejs process is stopped or restarted.")]),e._v(" "),o("p",[e._v("You can create your own session provider & store it in database or wherever you want. A session provider is a class which extends the class - "),o("code",[e._v("SessionProvider")]),e._v(".")]),e._v(" "),o("p",[e._v("Let's see how we can implement a simple memory session provider - ")]),e._v(" "),o("pre",[o("code",[e._v('import { SessionProvider } from "fortjs";\n\nconst sessionValues = {};\n\nexport class CustomSessionProvider extends SessionProvider {\n\n    async get(key: string) {\n        const savedSession = sessionValues[this.sessionId];\n        return savedSession != null ? savedSession[key] : null;\n    }\n\n    async isExist(key: string) {\n        const savedValue = sessionValues[this.sessionId];\n        return savedValue == null ? false : savedValue[key] != null;\n    }\n\n    async getAll() {\n        const savedValue = sessionValues[this.sessionId];\n        return savedValue == null ? {} : savedValue;\n    }\n\n    async set(key: string, val: any) {\n        const savedValue = sessionValues[this.sessionId];\n        if (savedValue == null) {\n            this.createSession();\n            sessionValues[this.sessionId] = {\n                [key]: val\n            };\n        }\n        else {\n            savedValue[key] = val;\n        }\n    }\n\n    setMany(values: { [key: string]: any }) {\n        return Promise.all(\n            Object.keys(values).map((key) => {\n                return this.set(key, values[key]);\n            })\n        );\n    }\n\n    async remove(key: string) {\n        const savedValue = sessionValues[this.sessionId];\n        if (savedValue != null) {\n            savedValue[key] = null;\n        }\n    }\n\n    async clear() {\n        // remove session values\n        delete sessionValues[this.sessionId];\n        // expire cookie in browser\n        await this.destroySession();\n    }\n}\n')])]),e._v(" "),o("p",[e._v("After you have created a session provider, you need to tell fortjs to use new session provider.")]),e._v(" "),o("pre",[o("code",[e._v('import { Fort } from "fortjs";\nimport { UserController } from "./controllers";\nimport { CustomSessionProvider } from "./extra/custom_session_provider";\n\n// set your session provider\nFort.sessionProvider = CustomSessionProvider\n\n//add routes\nFort.routes = [{\n    controller: UserController,\n    path: "/user"\n}];\n\nFort.create();\n')])]),e._v(" "),o("p",[e._v("Have a look at redis session provider example - "),o("a",{attrs:{href:"https://github.com/ujjwalguptaofficial/fortjs-examples/tree/master/session-provider/redis"}},[e._v("https://github.com/ujjwalguptaofficial/fortjs-examples/tree/master/session-provider/redis")])])])}),[],!1,null,null,null);n.default=component.exports}}]);