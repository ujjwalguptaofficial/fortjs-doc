(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{186:function(e,t,n){"use strict";n.r(t);var o={components:{Layout:n(170).a}},r=n(12),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("Layout",{attrs:{title:"Authentication",description:"How to authenticate in nodejs using fortjs",keywords:"authentication, example, tutorial, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/authentication.md"}},[n("p",[e._v("There are multiple ways in which we can authenticate. But we will learn how to do session authentication based on userid/password combination.")]),e._v(" "),n("p",[e._v("So the concept is simple - a registered user has userid and password. They can access the system once they have entered valid credential. We need to design a login page through which user can login.")]),e._v(" "),n("p",[e._v("Let's consider that our app has a default controller and it can be accessed by anyone without login. Basically it contains a home page, a login page, a registration page etc.")]),e._v(" "),n("pre",[n("code",[e._v('export class DefaultController extends Controller {\n    @DefaultWorker()\n    async default() {\n        const result = await viewResult(\'controller:default,action:default\');\n        return result;\n    }\n\n    @Worker(HTTP_METHOD.Get)\n    @Route("/login")\n    async getloginForm() {\n        const result = viewResult("login_form");\n        return result;\n    } \n\n    @Worker(HTTP_METHOD.Post)\n    async login() {\n        const emailId = this.body.emailId;\n        const pwd = this.body.password;\n        if (emailId != null && pwd != null) {\n            const userService = new UserService();\n            const user = userService.getUserByEmail(emailId);\n            if (user != null && user.password === pwd) {\n                this.session.set(\'userId\', user.id);\n                this.session.set(\'emailId\', emailId);\n                return textResult(`Authenticated`);\n            }\n            else {\n               return textResult("Invalid credential");\n            }\n        }\n        else {\n            return textResult("Please make sure, you are sending emailId and password");\n        }\n    }\n}\n')])]),e._v(" "),n("p",[e._v("You can see - we have three worker.")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("default")]),e._v(" - is used to show the home page")]),e._v(" "),n("li",[n("strong",[e._v("getloginForm")]),e._v(' - is used to show the login form when request is "GET"')]),e._v(" "),n("li",[n("strong",[e._v("login")]),e._v(" - is  used to login into the sytem through POST request.This method retrieve emailId and password from body and check whether emailId/password is correct. And if correct - it creates the session. When session is created, framework creates a cookie and sent to browser. Framework tracks user by cookie. ")])]),e._v(" "),n("p",[n("br"),e._v("\nOnce the session has been set for a user. It can be accessed anywhere in the system (any controller/worker) using - "),n("code",[e._v("this.session.get('userId')")]),e._v("  or "),n("code",[e._v("this.session.isExist('userId')")])]),e._v(" "),n("p",[e._v("In order to not allow unauthenticated user to access restricted method : we can check in every worker - If session is set or not and then take actions.")]),e._v(" "),n("p",[e._v("e.g - if session is present then fulfill the request otherwise redirect to login page or send a text response with http code 401.")]),e._v(" "),n("p",[e._v("We can take the above concept and divide into "),n("a",{attrs:{href:"/tutorial/components"}},[e._v("component")]),e._v(", so that we don't need to write in every method. We can use shield or guard - this completely depends upon requirement.")]),e._v(" "),n("p",[e._v("Let's consider - we want to restrict at controller level and for this we need to create a "),n("a",{attrs:{href:"/tutorial/components/shield"}},[e._v("shield")]),e._v(" - ")]),e._v(" "),n("pre",[n("code",[e._v('import { Shield, textResult,  redirectResult } from "fortjs";\nexport class AuthenticationShield extends Shield {\n\n    async protect() {\n\n        const isExist = await this.session.isExist(\'userId\');\n        if (exist) { // user is authenticated so allow\n            return null;\n        } else { //user is not authenticated, so redirect to login page\n            return redirectResult("/default/login");\n        }\n    }\n}\n')])]),e._v(" "),n("p",[e._v("Now we can add shield to any controllers where we need to restrict. Let's add this into user controller - ")]),e._v(" "),n("pre",[n("code",[e._v('import { Controller, Shields } from "fortjs";\nimport { AuthenticationShield } from "location where shield is defined";\n\n@Shields(AuthenticationShield) \nexport class UserController extends Controller {\n\n}\n')])]),e._v(" "),n("p",[e._v("Now UserController wont be initiated until AuthenticationShield allows i.e user is authenticated.")]),e._v(" "),n("p",[e._v("In the similar way - you can create a "),n("a",{attrs:{href:"/tutorial/guard"}},[e._v("guard")]),e._v(" to restrict at worker level.")]),e._v(" "),n("p",[e._v("We have created example for you to understand in depth but will recommend you to create a demo by yourself. Here is example link - "),n("a",{attrs:{href:"https://github.com/ujjwalguptaofficial/fortjs/tree/master/example/authentication"}},[e._v("Authentiction Example")])])])}),[],!1,null,null,null);t.default=component.exports}}]);