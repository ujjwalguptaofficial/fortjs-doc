(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{201:function(e,t,o){"use strict";o.r(t);var r={components:{Layout:o(170).a}},n=o(12),component=Object(n.a)(r,(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("Layout",{attrs:{title:"Expect Body",description:"This page tells about decorator ExpectBody & how to use this.",keywords:"body, secure body, validation, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/decorator/expect-body.md"}},[o("p",[e._v("ExpectBody is a decorator which helps you to validate body data. It provides following features -")]),e._v(" "),o("ul",[o("li",[e._v("Check data type of incoming body data against expected body.")]),e._v(" "),o("li",[e._v("Removes unnecessary data from incoming body. This helps you to store data in nosql database without retrieving particular property and thus saving lots of code.")])]),e._v(" "),o("p",[o("br")]),e._v(" "),o("h2",{attrs:{id:"checkdatatype"}},[e._v("Check data type")]),e._v(" "),o("p",[o("br"),e._v("\nConsider a post request which sends following data in request ")]),e._v(" "),o("pre",[o("code",[e._v('{\n    price:"1200",\n    name:"black jeans nike"\n}\n')])]),e._v(" "),o("p",[e._v("Here price being sent is 1200 which is string but server expects it to be number. In this case you will write codes to check for data type of "),o("code",[e._v("price")]),e._v(" property. ")]),e._v(" "),o("p",[e._v("But when using "),o("code",[e._v("ExpectBody")]),e._v(" it will automatically check the datatype & if not matches then returns a 400 request. This saves you writing code for validation of property type.")]),e._v(" "),o("p",[e._v("Let's see how to configure this using "),o("code",[e._v("ExpectBody")])]),e._v(" "),o("pre",[o("code",[e._v('export class ProductController{\n\n    @Route("/")\n    @Worker("post")\n    @ExpectBody({ price:0, name:""})\n    saveProduct(){\n       const product =  this.body;\n    }\n}\n')])]),e._v(" "),o("p",[e._v("You can also provide a class as parameter. Make sure that class properties are initialized.")]),e._v(" "),o("p",[e._v("e.g - ")]),e._v(" "),o("pre",[o("code",[e._v('export class Product {\n  price = 0;\n  name = ""\n}\n\nexport class ProductController{\n\n    @Route("/")\n    @Worker("post")\n    @ExpectBody(Product)\n    saveProduct(){\n       const product =  this.body;\n    }\n}\n')])]),e._v(" "),o("p",[o("br")]),e._v(" "),o("h2",{attrs:{id:"removesunnecessarydatafromincomingbody"}},[e._v("Removes unnecessary data from incoming body")]),e._v(" "),o("p",[o("br"),e._v("\nConsider a post request which sends following data in request ")]),e._v(" "),o("pre",[o("code",[e._v('{\n    name:"ujjwal gupta",\n    gender:"male",\n    extra:"some extra value" // some extra value which is not required\n}\n')])]),e._v(" "),o("p",[e._v("now for such requests -")]),e._v(" "),o("h3",{attrs:{id:"1weeithersavethewholedata"}},[e._v("1. We either save the whole data")]),e._v(" "),o("pre",[o("code",[e._v('export class UserController{\n\n    @Route("/")\n    @Worker("post")\n    saveUser(){\n       const user = this.body;\n       // save user into mongodb\n       const service = new UserService();\n       service.saveUser(user);\n    }\n}\n')])]),e._v(" "),o("p",[e._v("In this case - property "),o("code",[e._v("extra")]),e._v(" will be saved too & thus your database has now garbage value. This is a very big risk & you shouldn't save data this way when using nosql database.")]),e._v(" "),o("h3",{attrs:{id:"2extractparticularvaluefrombody"}},[e._v("2. Extract particular value from body")]),e._v(" "),o("pre",[o("code",[e._v('export class UserController{\n\n    @Route("/")\n    @Worker("post")\n    saveUser(){\n       const user = {\n           name:this.body.name,\n           gender: this.body.gender\n       } ;\n       // save user into mongodb\n       const service = new UserService();\n       service.saveUser(user);\n    }\n}\n')])]),e._v(" "),o("p",[e._v("this is a good way but consider user value with 10 properties which means you need to write 10 lines of code.")]),e._v(" "),o("p",[e._v("Let's write the above code using "),o("code",[e._v("ExpectBody")])]),e._v(" "),o("pre",[o("code",[e._v('export class UserController{\n\n    @Route("/")\n    @Worker("post")\n    @ExpectBody({name:"", gender: ""})\n    saveUser(){\n       const user =  this.body;\n       // save user into mongodb\n       const service = new UserService();\n       service.saveUser(user);\n    }\n}\n')])])])}),[],!1,null,null,null);t.default=component.exports}}]);