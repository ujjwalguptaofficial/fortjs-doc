(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{218:function(o,e,t){"use strict";t.r(e);var n={components:{Layout:t(170).a}},c=t(12),component=Object(c.a)(n,(function(){var o=this,e=o.$createElement,t=o._self._c||e;return t("Layout",{attrs:{title:"Cookie",description:"How to access Http Cookie in node using fortjs",keywords:"cookie, http, manipulation, fortjs, node",contentSrc:"/home/travis/build/ujjwalguptaofficial/fortjs.docs/out/content/tutorial/concepts/cookie.md"}},[t("p",[t("code",[o._v("cookie")]),o._v(" is class member of Wall, Guard , Shield and Controller.")]),o._v(" "),t("p",[o._v("Let's see how we can use cookie -")]),o._v(" "),t("pre",[t("code",[o._v("import { Controller, DefaultWorker textResult, viewResult } from \"fortjs\";\nimport { HttpCookie } from \"fortjs\";\n\nexport class DefaultController extends Controller {\n    @DefaultWorker()\n    async default() {\n\n        // check exist\n        const isCookieExist = this.cookie.isExist('cookie_name');\n\n        // get cookie\n        const cookie = this.cookie.getCookie('cookie_name');\n\n        //add cookie\n        const newCookie = new HttpCookie('new_cookie','cookie_value');\n        this.cookie.addCookie(newCookie);\n\n        //remove cookie\n        this.cookie.removeCookie('cookie_name');\n\n        return textResult(\"Hey, we have tested cookie successfully\");\n    }\n}\n")])]),o._v(" "),t("p",[o._v("In the same way you can access cookie in Wall, Guard and Shield.")])])}),[],!1,null,null,null);e.default=component.exports}}]);